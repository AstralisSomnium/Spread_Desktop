/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IStakePoolsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Estimate Fee
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for joining or leaving a stake pool. Note that it is an estimation because a delegation induces a transaction for which coins have to be selected randomly within the wallet. Because of this randomness, fees can only be estimated. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>InlineResponse202</returns>
        InlineResponse202 GetDelegationFee (string walletId);

        /// <summary>
        /// Estimate Fee
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for joining or leaving a stake pool. Note that it is an estimation because a delegation induces a transaction for which coins have to be selected randomly within the wallet. Because of this randomness, fees can only be estimated. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        ApiResponse<InlineResponse202> GetDelegationFeeWithHttpInfo (string walletId);
        /// <summary>
        /// View maintenance actions
        /// </summary>
        /// <remarks>
        /// Returns the current status of the stake pools maintenance actions. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GetMaintenanceActions ();

        /// <summary>
        /// View maintenance actions
        /// </summary>
        /// <remarks>
        /// Returns the current status of the stake pools maintenance actions. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GetMaintenanceActionsWithHttpInfo ();
        /// <summary>
        /// Join
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Delegate all (current and future) addresses from the given wallet to the given stake pool.  &lt;strong&gt;Note:&lt;/strong&gt; Bech32-encoded stake pool identifiers can vary in length. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stakePoolId"></param>
        /// <param name="walletId"></param>
        /// <returns>InlineResponse2021</returns>
        InlineResponse2021 JoinStakePool (Body9 body, string stakePoolId, string walletId);

        /// <summary>
        /// Join
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Delegate all (current and future) addresses from the given wallet to the given stake pool.  &lt;strong&gt;Note:&lt;/strong&gt; Bech32-encoded stake pool identifiers can vary in length. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stakePoolId"></param>
        /// <param name="walletId"></param>
        /// <returns>ApiResponse of InlineResponse2021</returns>
        ApiResponse<InlineResponse2021> JoinStakePoolWithHttpInfo (Body9 body, string stakePoolId, string walletId);
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all known stake pools ordered by descending &#x60;non_myopic_member_rewards&#x60;. The &#x60;non_myopic_member_rewards&#x60; — and thus the ordering — depends on the &#x60;?stake&#x60; query parameter.  Some pools _may_ also have metadata attached to them. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stake">The stake the user intends to delegate in Lovelace. Required. </param>
        /// <returns>List&lt;InlineResponse2006&gt;</returns>
        List<InlineResponse2006> ListStakePools (int? stake);

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all known stake pools ordered by descending &#x60;non_myopic_member_rewards&#x60;. The &#x60;non_myopic_member_rewards&#x60; — and thus the ordering — depends on the &#x60;?stake&#x60; query parameter.  Some pools _may_ also have metadata attached to them. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stake">The stake the user intends to delegate in Lovelace. Required. </param>
        /// <returns>ApiResponse of List&lt;InlineResponse2006&gt;</returns>
        ApiResponse<List<InlineResponse2006>> ListStakePoolsWithHttpInfo (int? stake);
        /// <summary>
        /// Trigger Maintenance actions
        /// </summary>
        /// <remarks>
        /// Performs maintenance actions on stake pools, such as triggering metadata garbage collection.  Actions may not be instantaneous. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void PostMaintenanceAction (Body7 body);

        /// <summary>
        /// Trigger Maintenance actions
        /// </summary>
        /// <remarks>
        /// Performs maintenance actions on stake pools, such as triggering metadata garbage collection.  Actions may not be instantaneous. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostMaintenanceActionWithHttpInfo (Body7 body);
        /// <summary>
        /// Quit
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Stop delegating completely. The wallet&#x27;s stake will become inactive.  &gt; ⚠️  Disclaimer ⚠️ &gt; &gt; This endpoint historically use to take a stake pool id as a path parameter. &gt; However, retiring from delegation is ubiquitous and not tight to a particular &gt; stake pool. For backward-compatibility reasons, sending stake pool ids as path &gt; parameter will still be accepted by the server but new integrations are &gt; encouraged to provide a placeholder asterisk &#x60;*&#x60; instead. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>InlineResponse2021</returns>
        InlineResponse2021 QuitStakePool (Body8 body, string walletId);

        /// <summary>
        /// Quit
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Stop delegating completely. The wallet&#x27;s stake will become inactive.  &gt; ⚠️  Disclaimer ⚠️ &gt; &gt; This endpoint historically use to take a stake pool id as a path parameter. &gt; However, retiring from delegation is ubiquitous and not tight to a particular &gt; stake pool. For backward-compatibility reasons, sending stake pool ids as path &gt; parameter will still be accepted by the server but new integrations are &gt; encouraged to provide a placeholder asterisk &#x60;*&#x60; instead. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>ApiResponse of InlineResponse2021</returns>
        ApiResponse<InlineResponse2021> QuitStakePoolWithHttpInfo (Body8 body, string walletId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Estimate Fee
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for joining or leaving a stake pool. Note that it is an estimation because a delegation induces a transaction for which coins have to be selected randomly within the wallet. Because of this randomness, fees can only be estimated. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>Task of InlineResponse202</returns>
        System.Threading.Tasks.Task<InlineResponse202> GetDelegationFeeAsync (string walletId);

        /// <summary>
        /// Estimate Fee
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for joining or leaving a stake pool. Note that it is an estimation because a delegation induces a transaction for which coins have to be selected randomly within the wallet. Because of this randomness, fees can only be estimated. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> GetDelegationFeeAsyncWithHttpInfo (string walletId);
        /// <summary>
        /// View maintenance actions
        /// </summary>
        /// <remarks>
        /// Returns the current status of the stake pools maintenance actions. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GetMaintenanceActionsAsync ();

        /// <summary>
        /// View maintenance actions
        /// </summary>
        /// <remarks>
        /// Returns the current status of the stake pools maintenance actions. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetMaintenanceActionsAsyncWithHttpInfo ();
        /// <summary>
        /// Join
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Delegate all (current and future) addresses from the given wallet to the given stake pool.  &lt;strong&gt;Note:&lt;/strong&gt; Bech32-encoded stake pool identifiers can vary in length. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stakePoolId"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of InlineResponse2021</returns>
        System.Threading.Tasks.Task<InlineResponse2021> JoinStakePoolAsync (Body9 body, string stakePoolId, string walletId);

        /// <summary>
        /// Join
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Delegate all (current and future) addresses from the given wallet to the given stake pool.  &lt;strong&gt;Note:&lt;/strong&gt; Bech32-encoded stake pool identifiers can vary in length. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stakePoolId"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2021>> JoinStakePoolAsyncWithHttpInfo (Body9 body, string stakePoolId, string walletId);
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all known stake pools ordered by descending &#x60;non_myopic_member_rewards&#x60;. The &#x60;non_myopic_member_rewards&#x60; — and thus the ordering — depends on the &#x60;?stake&#x60; query parameter.  Some pools _may_ also have metadata attached to them. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stake">The stake the user intends to delegate in Lovelace. Required. </param>
        /// <returns>Task of List&lt;InlineResponse2006&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2006>> ListStakePoolsAsync (int? stake);

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all known stake pools ordered by descending &#x60;non_myopic_member_rewards&#x60;. The &#x60;non_myopic_member_rewards&#x60; — and thus the ordering — depends on the &#x60;?stake&#x60; query parameter.  Some pools _may_ also have metadata attached to them. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stake">The stake the user intends to delegate in Lovelace. Required. </param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2006&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2006>>> ListStakePoolsAsyncWithHttpInfo (int? stake);
        /// <summary>
        /// Trigger Maintenance actions
        /// </summary>
        /// <remarks>
        /// Performs maintenance actions on stake pools, such as triggering metadata garbage collection.  Actions may not be instantaneous. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostMaintenanceActionAsync (Body7 body);

        /// <summary>
        /// Trigger Maintenance actions
        /// </summary>
        /// <remarks>
        /// Performs maintenance actions on stake pools, such as triggering metadata garbage collection.  Actions may not be instantaneous. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostMaintenanceActionAsyncWithHttpInfo (Body7 body);
        /// <summary>
        /// Quit
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Stop delegating completely. The wallet&#x27;s stake will become inactive.  &gt; ⚠️  Disclaimer ⚠️ &gt; &gt; This endpoint historically use to take a stake pool id as a path parameter. &gt; However, retiring from delegation is ubiquitous and not tight to a particular &gt; stake pool. For backward-compatibility reasons, sending stake pool ids as path &gt; parameter will still be accepted by the server but new integrations are &gt; encouraged to provide a placeholder asterisk &#x60;*&#x60; instead. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of InlineResponse2021</returns>
        System.Threading.Tasks.Task<InlineResponse2021> QuitStakePoolAsync (Body8 body, string walletId);

        /// <summary>
        /// Quit
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Stop delegating completely. The wallet&#x27;s stake will become inactive.  &gt; ⚠️  Disclaimer ⚠️ &gt; &gt; This endpoint historically use to take a stake pool id as a path parameter. &gt; However, retiring from delegation is ubiquitous and not tight to a particular &gt; stake pool. For backward-compatibility reasons, sending stake pool ids as path &gt; parameter will still be accepted by the server but new integrations are &gt; encouraged to provide a placeholder asterisk &#x60;*&#x60; instead. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2021>> QuitStakePoolAsyncWithHttpInfo (Body8 body, string walletId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class StakePoolsApi : IStakePoolsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StakePoolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StakePoolsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StakePoolsApi"/> class
        /// </summary>
        /// <returns></returns>
        public StakePoolsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StakePoolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StakePoolsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Estimate Fee &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for joining or leaving a stake pool. Note that it is an estimation because a delegation induces a transaction for which coins have to be selected randomly within the wallet. Because of this randomness, fees can only be estimated. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>InlineResponse202</returns>
        public InlineResponse202 GetDelegationFee (string walletId)
        {
             ApiResponse<InlineResponse202> localVarResponse = GetDelegationFeeWithHttpInfo(walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate Fee &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for joining or leaving a stake pool. Note that it is an estimation because a delegation induces a transaction for which coins have to be selected randomly within the wallet. Because of this randomness, fees can only be estimated. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        public ApiResponse< InlineResponse202 > GetDelegationFeeWithHttpInfo (string walletId)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling StakePoolsApi->GetDelegationFee");

            var localVarPath = "/wallets/{walletId}/delegation-fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDelegationFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse202>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse202) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse202)));
        }

        /// <summary>
        /// Estimate Fee &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for joining or leaving a stake pool. Note that it is an estimation because a delegation induces a transaction for which coins have to be selected randomly within the wallet. Because of this randomness, fees can only be estimated. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>Task of InlineResponse202</returns>
        public async System.Threading.Tasks.Task<InlineResponse202> GetDelegationFeeAsync (string walletId)
        {
             ApiResponse<InlineResponse202> localVarResponse = await GetDelegationFeeAsyncWithHttpInfo(walletId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Estimate Fee &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for joining or leaving a stake pool. Note that it is an estimation because a delegation induces a transaction for which coins have to be selected randomly within the wallet. Because of this randomness, fees can only be estimated. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> GetDelegationFeeAsyncWithHttpInfo (string walletId)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling StakePoolsApi->GetDelegationFee");

            var localVarPath = "/wallets/{walletId}/delegation-fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDelegationFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse202>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse202) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse202)));
        }

        /// <summary>
        /// View maintenance actions Returns the current status of the stake pools maintenance actions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GetMaintenanceActions ()
        {
             ApiResponse<InlineResponse2007> localVarResponse = GetMaintenanceActionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// View maintenance actions Returns the current status of the stake pools maintenance actions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse< InlineResponse2007 > GetMaintenanceActionsWithHttpInfo ()
        {

            var localVarPath = "/stake-pools/maintenance-actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMaintenanceActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// View maintenance actions Returns the current status of the stake pools maintenance actions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> GetMaintenanceActionsAsync ()
        {
             ApiResponse<InlineResponse2007> localVarResponse = await GetMaintenanceActionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// View maintenance actions Returns the current status of the stake pools maintenance actions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetMaintenanceActionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/stake-pools/maintenance-actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMaintenanceActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Join &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Delegate all (current and future) addresses from the given wallet to the given stake pool.  &lt;strong&gt;Note:&lt;/strong&gt; Bech32-encoded stake pool identifiers can vary in length. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stakePoolId"></param>
        /// <param name="walletId"></param>
        /// <returns>InlineResponse2021</returns>
        public InlineResponse2021 JoinStakePool (Body9 body, string stakePoolId, string walletId)
        {
             ApiResponse<InlineResponse2021> localVarResponse = JoinStakePoolWithHttpInfo(body, stakePoolId, walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Join &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Delegate all (current and future) addresses from the given wallet to the given stake pool.  &lt;strong&gt;Note:&lt;/strong&gt; Bech32-encoded stake pool identifiers can vary in length. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stakePoolId"></param>
        /// <param name="walletId"></param>
        /// <returns>ApiResponse of InlineResponse2021</returns>
        public ApiResponse< InlineResponse2021 > JoinStakePoolWithHttpInfo (Body9 body, string stakePoolId, string walletId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StakePoolsApi->JoinStakePool");
            // verify the required parameter 'stakePoolId' is set
            if (stakePoolId == null)
                throw new ApiException(400, "Missing required parameter 'stakePoolId' when calling StakePoolsApi->JoinStakePool");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling StakePoolsApi->JoinStakePool");

            var localVarPath = "/stake-pools/{stakePoolId}/wallets/{walletId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stakePoolId != null) localVarPathParams.Add("stakePoolId", this.Configuration.ApiClient.ParameterToString(stakePoolId)); // path parameter
            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinStakePool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2021)));
        }

        /// <summary>
        /// Join &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Delegate all (current and future) addresses from the given wallet to the given stake pool.  &lt;strong&gt;Note:&lt;/strong&gt; Bech32-encoded stake pool identifiers can vary in length. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stakePoolId"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of InlineResponse2021</returns>
        public async System.Threading.Tasks.Task<InlineResponse2021> JoinStakePoolAsync (Body9 body, string stakePoolId, string walletId)
        {
             ApiResponse<InlineResponse2021> localVarResponse = await JoinStakePoolAsyncWithHttpInfo(body, stakePoolId, walletId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Join &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Delegate all (current and future) addresses from the given wallet to the given stake pool.  &lt;strong&gt;Note:&lt;/strong&gt; Bech32-encoded stake pool identifiers can vary in length. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stakePoolId"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2021>> JoinStakePoolAsyncWithHttpInfo (Body9 body, string stakePoolId, string walletId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StakePoolsApi->JoinStakePool");
            // verify the required parameter 'stakePoolId' is set
            if (stakePoolId == null)
                throw new ApiException(400, "Missing required parameter 'stakePoolId' when calling StakePoolsApi->JoinStakePool");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling StakePoolsApi->JoinStakePool");

            var localVarPath = "/stake-pools/{stakePoolId}/wallets/{walletId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stakePoolId != null) localVarPathParams.Add("stakePoolId", this.Configuration.ApiClient.ParameterToString(stakePoolId)); // path parameter
            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinStakePool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2021)));
        }

        /// <summary>
        /// List &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all known stake pools ordered by descending &#x60;non_myopic_member_rewards&#x60;. The &#x60;non_myopic_member_rewards&#x60; — and thus the ordering — depends on the &#x60;?stake&#x60; query parameter.  Some pools _may_ also have metadata attached to them. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stake">The stake the user intends to delegate in Lovelace. Required. </param>
        /// <returns>List&lt;InlineResponse2006&gt;</returns>
        public List<InlineResponse2006> ListStakePools (int? stake)
        {
             ApiResponse<List<InlineResponse2006>> localVarResponse = ListStakePoolsWithHttpInfo(stake);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all known stake pools ordered by descending &#x60;non_myopic_member_rewards&#x60;. The &#x60;non_myopic_member_rewards&#x60; — and thus the ordering — depends on the &#x60;?stake&#x60; query parameter.  Some pools _may_ also have metadata attached to them. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stake">The stake the user intends to delegate in Lovelace. Required. </param>
        /// <returns>ApiResponse of List&lt;InlineResponse2006&gt;</returns>
        public ApiResponse< List<InlineResponse2006> > ListStakePoolsWithHttpInfo (int? stake)
        {
            // verify the required parameter 'stake' is set
            if (stake == null)
                throw new ApiException(400, "Missing required parameter 'stake' when calling StakePoolsApi->ListStakePools");

            var localVarPath = "/stake-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stake != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stake", stake)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListStakePools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2006>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2006>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2006>)));
        }

        /// <summary>
        /// List &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all known stake pools ordered by descending &#x60;non_myopic_member_rewards&#x60;. The &#x60;non_myopic_member_rewards&#x60; — and thus the ordering — depends on the &#x60;?stake&#x60; query parameter.  Some pools _may_ also have metadata attached to them. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stake">The stake the user intends to delegate in Lovelace. Required. </param>
        /// <returns>Task of List&lt;InlineResponse2006&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2006>> ListStakePoolsAsync (int? stake)
        {
             ApiResponse<List<InlineResponse2006>> localVarResponse = await ListStakePoolsAsyncWithHttpInfo(stake);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all known stake pools ordered by descending &#x60;non_myopic_member_rewards&#x60;. The &#x60;non_myopic_member_rewards&#x60; — and thus the ordering — depends on the &#x60;?stake&#x60; query parameter.  Some pools _may_ also have metadata attached to them. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stake">The stake the user intends to delegate in Lovelace. Required. </param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2006&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2006>>> ListStakePoolsAsyncWithHttpInfo (int? stake)
        {
            // verify the required parameter 'stake' is set
            if (stake == null)
                throw new ApiException(400, "Missing required parameter 'stake' when calling StakePoolsApi->ListStakePools");

            var localVarPath = "/stake-pools";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stake != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stake", stake)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListStakePools", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2006>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2006>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2006>)));
        }

        /// <summary>
        /// Trigger Maintenance actions Performs maintenance actions on stake pools, such as triggering metadata garbage collection.  Actions may not be instantaneous. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void PostMaintenanceAction (Body7 body)
        {
             PostMaintenanceActionWithHttpInfo(body);
        }

        /// <summary>
        /// Trigger Maintenance actions Performs maintenance actions on stake pools, such as triggering metadata garbage collection.  Actions may not be instantaneous. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostMaintenanceActionWithHttpInfo (Body7 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StakePoolsApi->PostMaintenanceAction");

            var localVarPath = "/stake-pools/maintenance-actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMaintenanceAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Trigger Maintenance actions Performs maintenance actions on stake pools, such as triggering metadata garbage collection.  Actions may not be instantaneous. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostMaintenanceActionAsync (Body7 body)
        {
             await PostMaintenanceActionAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Trigger Maintenance actions Performs maintenance actions on stake pools, such as triggering metadata garbage collection.  Actions may not be instantaneous. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostMaintenanceActionAsyncWithHttpInfo (Body7 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StakePoolsApi->PostMaintenanceAction");

            var localVarPath = "/stake-pools/maintenance-actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostMaintenanceAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Quit &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Stop delegating completely. The wallet&#x27;s stake will become inactive.  &gt; ⚠️  Disclaimer ⚠️ &gt; &gt; This endpoint historically use to take a stake pool id as a path parameter. &gt; However, retiring from delegation is ubiquitous and not tight to a particular &gt; stake pool. For backward-compatibility reasons, sending stake pool ids as path &gt; parameter will still be accepted by the server but new integrations are &gt; encouraged to provide a placeholder asterisk &#x60;*&#x60; instead. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>InlineResponse2021</returns>
        public InlineResponse2021 QuitStakePool (Body8 body, string walletId)
        {
             ApiResponse<InlineResponse2021> localVarResponse = QuitStakePoolWithHttpInfo(body, walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Quit &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Stop delegating completely. The wallet&#x27;s stake will become inactive.  &gt; ⚠️  Disclaimer ⚠️ &gt; &gt; This endpoint historically use to take a stake pool id as a path parameter. &gt; However, retiring from delegation is ubiquitous and not tight to a particular &gt; stake pool. For backward-compatibility reasons, sending stake pool ids as path &gt; parameter will still be accepted by the server but new integrations are &gt; encouraged to provide a placeholder asterisk &#x60;*&#x60; instead. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>ApiResponse of InlineResponse2021</returns>
        public ApiResponse< InlineResponse2021 > QuitStakePoolWithHttpInfo (Body8 body, string walletId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StakePoolsApi->QuitStakePool");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling StakePoolsApi->QuitStakePool");

            var localVarPath = "/stake-pools/*/wallets/{walletId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuitStakePool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2021)));
        }

        /// <summary>
        /// Quit &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Stop delegating completely. The wallet&#x27;s stake will become inactive.  &gt; ⚠️  Disclaimer ⚠️ &gt; &gt; This endpoint historically use to take a stake pool id as a path parameter. &gt; However, retiring from delegation is ubiquitous and not tight to a particular &gt; stake pool. For backward-compatibility reasons, sending stake pool ids as path &gt; parameter will still be accepted by the server but new integrations are &gt; encouraged to provide a placeholder asterisk &#x60;*&#x60; instead. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of InlineResponse2021</returns>
        public async System.Threading.Tasks.Task<InlineResponse2021> QuitStakePoolAsync (Body8 body, string walletId)
        {
             ApiResponse<InlineResponse2021> localVarResponse = await QuitStakePoolAsyncWithHttpInfo(body, walletId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Quit &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Stop delegating completely. The wallet&#x27;s stake will become inactive.  &gt; ⚠️  Disclaimer ⚠️ &gt; &gt; This endpoint historically use to take a stake pool id as a path parameter. &gt; However, retiring from delegation is ubiquitous and not tight to a particular &gt; stake pool. For backward-compatibility reasons, sending stake pool ids as path &gt; parameter will still be accepted by the server but new integrations are &gt; encouraged to provide a placeholder asterisk &#x60;*&#x60; instead. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2021>> QuitStakePoolAsyncWithHttpInfo (Body8 body, string walletId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StakePoolsApi->QuitStakePool");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling StakePoolsApi->QuitStakePool");

            var localVarPath = "/stake-pools/*/wallets/{walletId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuitStakePool", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2021)));
        }

    }
}

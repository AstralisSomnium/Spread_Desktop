/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiPostAccountKeyData
    /// </summary>
    [DataContract]
        public partial class ApiPostAccountKeyData :  IEquatable<ApiPostAccountKeyData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiPostAccountKeyData" /> class.
        /// </summary>
        /// <param name="passphrase">A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds) (required).</param>
        /// <param name="extended">Determines whether extended (with chain code) or normal (without chain code) key is requested (required).</param>
        public ApiPostAccountKeyData(string passphrase = default(string), bool? extended = default(bool?))
        {
            // to ensure "passphrase" is required (not null)
            if (passphrase == null)
            {
                throw new InvalidDataException("passphrase is a required property for ApiPostAccountKeyData and cannot be null");
            }
            else
            {
                this.Passphrase = passphrase;
            }
            // to ensure "extended" is required (not null)
            if (extended == null)
            {
                throw new InvalidDataException("extended is a required property for ApiPostAccountKeyData and cannot be null");
            }
            else
            {
                this.Extended = extended;
            }
        }
        
        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)
        /// </summary>
        /// <value>A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds)</value>
        [DataMember(Name="passphrase", EmitDefaultValue=false)]
        public string Passphrase { get; set; }

        /// <summary>
        /// Determines whether extended (with chain code) or normal (without chain code) key is requested
        /// </summary>
        /// <value>Determines whether extended (with chain code) or normal (without chain code) key is requested</value>
        [DataMember(Name="extended", EmitDefaultValue=false)]
        public bool? Extended { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiPostAccountKeyData {\n");
            sb.Append("  Passphrase: ").Append(Passphrase).Append("\n");
            sb.Append("  Extended: ").Append(Extended).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiPostAccountKeyData);
        }

        /// <summary>
        /// Returns true if ApiPostAccountKeyData instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiPostAccountKeyData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiPostAccountKeyData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Passphrase == input.Passphrase ||
                    (this.Passphrase != null &&
                    this.Passphrase.Equals(input.Passphrase))
                ) && 
                (
                    this.Extended == input.Extended ||
                    (this.Extended != null &&
                    this.Extended.Equals(input.Extended))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Passphrase != null)
                    hashCode = hashCode * 59 + this.Passphrase.GetHashCode();
                if (this.Extended != null)
                    hashCode = hashCode * 59 + this.Extended.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

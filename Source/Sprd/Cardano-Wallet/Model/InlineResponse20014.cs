/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse20014
    /// </summary>
    [DataContract]
        public partial class InlineResponse20014 :  IEquatable<InlineResponse20014>, IValidatableObject
    {
        /// <summary>
        /// Defines AddressStyle
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AddressStyleEnum
        {
            /// <summary>
            /// Enum Shelley for value: Shelley
            /// </summary>
            [EnumMember(Value = "Shelley")]
            Shelley = 1,
            /// <summary>
            /// Enum Icarus for value: Icarus
            /// </summary>
            [EnumMember(Value = "Icarus")]
            Icarus = 2,
            /// <summary>
            /// Enum Byron for value: Byron
            /// </summary>
            [EnumMember(Value = "Byron")]
            Byron = 3        }
        /// <summary>
        /// Gets or Sets AddressStyle
        /// </summary>
        [DataMember(Name="address_style", EmitDefaultValue=false)]
        public AddressStyleEnum AddressStyle { get; set; }
        /// <summary>
        /// Defines StakeReference
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StakeReferenceEnum
        {
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            /// <summary>
            /// Enum Byvalue for value: by value
            /// </summary>
            [EnumMember(Value = "by value")]
            Byvalue = 2,
            /// <summary>
            /// Enum Bypointer for value: by pointer
            /// </summary>
            [EnumMember(Value = "by pointer")]
            Bypointer = 3        }
        /// <summary>
        /// Gets or Sets StakeReference
        /// </summary>
        [DataMember(Name="stake_reference", EmitDefaultValue=false)]
        public StakeReferenceEnum StakeReference { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20014" /> class.
        /// </summary>
        /// <param name="addressStyle">addressStyle (required).</param>
        /// <param name="stakeReference">stakeReference (required).</param>
        /// <param name="networkTag">Can be null for &#x27;Icarus&#x27; and &#x27;Byron&#x27; styles..</param>
        /// <param name="spendingKeyHash">spendingKeyHash.</param>
        /// <param name="stakeKeyHash">stakeKeyHash.</param>
        /// <param name="scriptHash">scriptHash.</param>
        /// <param name="pointer">pointer.</param>
        /// <param name="addressRoot">Only for &#x27;Icarus&#x27; and &#x27;Byron&#x27; styles..</param>
        /// <param name="derivationPath">Only for &#x27;Byron&#x27; style..</param>
        public InlineResponse20014(AddressStyleEnum addressStyle = default(AddressStyleEnum), StakeReferenceEnum stakeReference = default(StakeReferenceEnum), int? networkTag = default(int?), string spendingKeyHash = default(string), string stakeKeyHash = default(string), string scriptHash = default(string), ApiAddressInspectPointer pointer = default(ApiAddressInspectPointer), string addressRoot = default(string), string derivationPath = default(string))
        {
            // to ensure "addressStyle" is required (not null)
            if (addressStyle == null)
            {
                throw new InvalidDataException("addressStyle is a required property for InlineResponse20014 and cannot be null");
            }
            else
            {
                this.AddressStyle = addressStyle;
            }
            // to ensure "stakeReference" is required (not null)
            if (stakeReference == null)
            {
                throw new InvalidDataException("stakeReference is a required property for InlineResponse20014 and cannot be null");
            }
            else
            {
                this.StakeReference = stakeReference;
            }
            this.NetworkTag = networkTag;
            this.SpendingKeyHash = spendingKeyHash;
            this.StakeKeyHash = stakeKeyHash;
            this.ScriptHash = scriptHash;
            this.Pointer = pointer;
            this.AddressRoot = addressRoot;
            this.DerivationPath = derivationPath;
        }
        


        /// <summary>
        /// Can be null for &#x27;Icarus&#x27; and &#x27;Byron&#x27; styles.
        /// </summary>
        /// <value>Can be null for &#x27;Icarus&#x27; and &#x27;Byron&#x27; styles.</value>
        [DataMember(Name="network_tag", EmitDefaultValue=false)]
        public int? NetworkTag { get; set; }

        /// <summary>
        /// Gets or Sets SpendingKeyHash
        /// </summary>
        [DataMember(Name="spending_key_hash", EmitDefaultValue=false)]
        public string SpendingKeyHash { get; set; }

        /// <summary>
        /// Gets or Sets StakeKeyHash
        /// </summary>
        [DataMember(Name="stake_key_hash", EmitDefaultValue=false)]
        public string StakeKeyHash { get; set; }

        /// <summary>
        /// Gets or Sets ScriptHash
        /// </summary>
        [DataMember(Name="script_hash", EmitDefaultValue=false)]
        public string ScriptHash { get; set; }

        /// <summary>
        /// Gets or Sets Pointer
        /// </summary>
        [DataMember(Name="pointer", EmitDefaultValue=false)]
        public ApiAddressInspectPointer Pointer { get; set; }

        /// <summary>
        /// Only for &#x27;Icarus&#x27; and &#x27;Byron&#x27; styles.
        /// </summary>
        /// <value>Only for &#x27;Icarus&#x27; and &#x27;Byron&#x27; styles.</value>
        [DataMember(Name="address_root", EmitDefaultValue=false)]
        public string AddressRoot { get; set; }

        /// <summary>
        /// Only for &#x27;Byron&#x27; style.
        /// </summary>
        /// <value>Only for &#x27;Byron&#x27; style.</value>
        [DataMember(Name="derivation_path", EmitDefaultValue=false)]
        public string DerivationPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20014 {\n");
            sb.Append("  AddressStyle: ").Append(AddressStyle).Append("\n");
            sb.Append("  StakeReference: ").Append(StakeReference).Append("\n");
            sb.Append("  NetworkTag: ").Append(NetworkTag).Append("\n");
            sb.Append("  SpendingKeyHash: ").Append(SpendingKeyHash).Append("\n");
            sb.Append("  StakeKeyHash: ").Append(StakeKeyHash).Append("\n");
            sb.Append("  ScriptHash: ").Append(ScriptHash).Append("\n");
            sb.Append("  Pointer: ").Append(Pointer).Append("\n");
            sb.Append("  AddressRoot: ").Append(AddressRoot).Append("\n");
            sb.Append("  DerivationPath: ").Append(DerivationPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20014);
        }

        /// <summary>
        /// Returns true if InlineResponse20014 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20014 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20014 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressStyle == input.AddressStyle ||
                    (this.AddressStyle != null &&
                    this.AddressStyle.Equals(input.AddressStyle))
                ) && 
                (
                    this.StakeReference == input.StakeReference ||
                    (this.StakeReference != null &&
                    this.StakeReference.Equals(input.StakeReference))
                ) && 
                (
                    this.NetworkTag == input.NetworkTag ||
                    (this.NetworkTag != null &&
                    this.NetworkTag.Equals(input.NetworkTag))
                ) && 
                (
                    this.SpendingKeyHash == input.SpendingKeyHash ||
                    (this.SpendingKeyHash != null &&
                    this.SpendingKeyHash.Equals(input.SpendingKeyHash))
                ) && 
                (
                    this.StakeKeyHash == input.StakeKeyHash ||
                    (this.StakeKeyHash != null &&
                    this.StakeKeyHash.Equals(input.StakeKeyHash))
                ) && 
                (
                    this.ScriptHash == input.ScriptHash ||
                    (this.ScriptHash != null &&
                    this.ScriptHash.Equals(input.ScriptHash))
                ) && 
                (
                    this.Pointer == input.Pointer ||
                    (this.Pointer != null &&
                    this.Pointer.Equals(input.Pointer))
                ) && 
                (
                    this.AddressRoot == input.AddressRoot ||
                    (this.AddressRoot != null &&
                    this.AddressRoot.Equals(input.AddressRoot))
                ) && 
                (
                    this.DerivationPath == input.DerivationPath ||
                    (this.DerivationPath != null &&
                    this.DerivationPath.Equals(input.DerivationPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressStyle != null)
                    hashCode = hashCode * 59 + this.AddressStyle.GetHashCode();
                if (this.StakeReference != null)
                    hashCode = hashCode * 59 + this.StakeReference.GetHashCode();
                if (this.NetworkTag != null)
                    hashCode = hashCode * 59 + this.NetworkTag.GetHashCode();
                if (this.SpendingKeyHash != null)
                    hashCode = hashCode * 59 + this.SpendingKeyHash.GetHashCode();
                if (this.StakeKeyHash != null)
                    hashCode = hashCode * 59 + this.StakeKeyHash.GetHashCode();
                if (this.ScriptHash != null)
                    hashCode = hashCode * 59 + this.ScriptHash.GetHashCode();
                if (this.Pointer != null)
                    hashCode = hashCode * 59 + this.Pointer.GetHashCode();
                if (this.AddressRoot != null)
                    hashCode = hashCode * 59 + this.AddressRoot.GetHashCode();
                if (this.DerivationPath != null)
                    hashCode = hashCode * 59 + this.DerivationPath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

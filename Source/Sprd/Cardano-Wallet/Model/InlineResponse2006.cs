/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2006
    /// </summary>
    [DataContract]
        public partial class InlineResponse2006 :  IEquatable<InlineResponse2006>, IValidatableObject
    {
        /// <summary>
        /// Defines Flags
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FlagsEnum
        {
            /// <summary>
            /// Enum Delisted for value: delisted
            /// </summary>
            [EnumMember(Value = "delisted")]
            Delisted = 1        }
        /// <summary>
        /// Various flags applicable to stake pools. Possible flags:  | flag     | description                                                                                                      | | - --      | - --                                                                                                              | | delisted | The pool is marked as delisted on a configured SMASH server; metadata for this pool have therefore been dropped. | 
        /// </summary>
        /// <value>Various flags applicable to stake pools. Possible flags:  | flag     | description                                                                                                      | | - --      | - --                                                                                                              | | delisted | The pool is marked as delisted on a configured SMASH server; metadata for this pool have therefore been dropped. | </value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public List<FlagsEnum> Flags { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2006" /> class.
        /// </summary>
        /// <param name="id">A unique identifier for the pool. (required).</param>
        /// <param name="metrics">metrics (required).</param>
        /// <param name="cost">cost (required).</param>
        /// <param name="margin">margin (required).</param>
        /// <param name="pledge">pledge (required).</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="retirement">retirement.</param>
        /// <param name="flags">Various flags applicable to stake pools. Possible flags:  | flag     | description                                                                                                      | | - --      | - --                                                                                                              | | delisted | The pool is marked as delisted on a configured SMASH server; metadata for this pool have therefore been dropped. |  (required).</param>
        public InlineResponse2006(string id = default(string), StakepoolsMetrics metrics = default(StakepoolsMetrics), StakepoolsCost cost = default(StakepoolsCost), StakepoolsMargin margin = default(StakepoolsMargin), StakepoolsPledge pledge = default(StakepoolsPledge), StakepoolsMetadata metadata = default(StakepoolsMetadata), StakepoolsRetirement retirement = default(StakepoolsRetirement), List<FlagsEnum> flags = default(List<FlagsEnum>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for InlineResponse2006 and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "metrics" is required (not null)
            if (metrics == null)
            {
                throw new InvalidDataException("metrics is a required property for InlineResponse2006 and cannot be null");
            }
            else
            {
                this.Metrics = metrics;
            }
            // to ensure "cost" is required (not null)
            if (cost == null)
            {
                throw new InvalidDataException("cost is a required property for InlineResponse2006 and cannot be null");
            }
            else
            {
                this.Cost = cost;
            }
            // to ensure "margin" is required (not null)
            if (margin == null)
            {
                throw new InvalidDataException("margin is a required property for InlineResponse2006 and cannot be null");
            }
            else
            {
                this.Margin = margin;
            }
            // to ensure "pledge" is required (not null)
            if (pledge == null)
            {
                throw new InvalidDataException("pledge is a required property for InlineResponse2006 and cannot be null");
            }
            else
            {
                this.Pledge = pledge;
            }
            // to ensure "flags" is required (not null)
            if (flags == null)
            {
                throw new InvalidDataException("flags is a required property for InlineResponse2006 and cannot be null");
            }
            else
            {
                this.Flags = flags;
            }
            this.Metadata = metadata;
            this.Retirement = retirement;
        }
        
        /// <summary>
        /// A unique identifier for the pool.
        /// </summary>
        /// <value>A unique identifier for the pool.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [DataMember(Name="metrics", EmitDefaultValue=false)]
        public StakepoolsMetrics Metrics { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public StakepoolsCost Cost { get; set; }

        /// <summary>
        /// Gets or Sets Margin
        /// </summary>
        [DataMember(Name="margin", EmitDefaultValue=false)]
        public StakepoolsMargin Margin { get; set; }

        /// <summary>
        /// Gets or Sets Pledge
        /// </summary>
        [DataMember(Name="pledge", EmitDefaultValue=false)]
        public StakepoolsPledge Pledge { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public StakepoolsMetadata Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Retirement
        /// </summary>
        [DataMember(Name="retirement", EmitDefaultValue=false)]
        public StakepoolsRetirement Retirement { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2006 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  Pledge: ").Append(Pledge).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Retirement: ").Append(Retirement).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2006);
        }

        /// <summary>
        /// Returns true if InlineResponse2006 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2006 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2006 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Metrics == input.Metrics ||
                    (this.Metrics != null &&
                    this.Metrics.Equals(input.Metrics))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.Margin == input.Margin ||
                    (this.Margin != null &&
                    this.Margin.Equals(input.Margin))
                ) && 
                (
                    this.Pledge == input.Pledge ||
                    (this.Pledge != null &&
                    this.Pledge.Equals(input.Pledge))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Retirement == input.Retirement ||
                    (this.Retirement != null &&
                    this.Retirement.Equals(input.Retirement))
                ) && 
                (
                    this.Flags == input.Flags ||
                    this.Flags != null &&
                    input.Flags != null &&
                    this.Flags.SequenceEqual(input.Flags)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Metrics != null)
                    hashCode = hashCode * 59 + this.Metrics.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.Margin != null)
                    hashCode = hashCode * 59 + this.Margin.GetHashCode();
                if (this.Pledge != null)
                    hashCode = hashCode * 59 + this.Pledge.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Retirement != null)
                    hashCode = hashCode * 59 + this.Retirement.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

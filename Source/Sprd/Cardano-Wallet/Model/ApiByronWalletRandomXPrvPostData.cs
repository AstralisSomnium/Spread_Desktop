/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// patate
    /// </summary>
    [DataContract]
        public partial class ApiByronWalletRandomXPrvPostData :  IEquatable<ApiByronWalletRandomXPrvPostData>, IValidatableObject
    {
        /// <summary>
        /// Defines Style
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StyleEnum
        {
            /// <summary>
            /// Enum Random for value: random
            /// </summary>
            [EnumMember(Value = "random")]
            Random = 1        }
        /// <summary>
        /// Gets or Sets Style
        /// </summary>
        [DataMember(Name="style", EmitDefaultValue=false)]
        public StyleEnum? Style { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiByronWalletRandomXPrvPostData" /> class.
        /// </summary>
        /// <param name="style">style.</param>
        /// <param name="name">name (required).</param>
        /// <param name="encryptedRootPrivateKey">A root private key, encrypted using a given passphrase. The underlying key should contain: - A private key - A chain code - A public key  (required).</param>
        /// <param name="passphraseHash">A hash of master passphrase. The hash should be an output of a Scrypt function with the following parameters: - logN &#x3D; 14 - r &#x3D; 8 - p &#x3D; 1  (required).</param>
        public ApiByronWalletRandomXPrvPostData(StyleEnum? style = default(StyleEnum?), string name = default(string), string encryptedRootPrivateKey = default(string), string passphraseHash = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ApiByronWalletRandomXPrvPostData and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "encryptedRootPrivateKey" is required (not null)
            if (encryptedRootPrivateKey == null)
            {
                throw new InvalidDataException("encryptedRootPrivateKey is a required property for ApiByronWalletRandomXPrvPostData and cannot be null");
            }
            else
            {
                this.EncryptedRootPrivateKey = encryptedRootPrivateKey;
            }
            // to ensure "passphraseHash" is required (not null)
            if (passphraseHash == null)
            {
                throw new InvalidDataException("passphraseHash is a required property for ApiByronWalletRandomXPrvPostData and cannot be null");
            }
            else
            {
                this.PassphraseHash = passphraseHash;
            }
            this.Style = style;
        }
        

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A root private key, encrypted using a given passphrase. The underlying key should contain: - A private key - A chain code - A public key 
        /// </summary>
        /// <value>A root private key, encrypted using a given passphrase. The underlying key should contain: - A private key - A chain code - A public key </value>
        [DataMember(Name="encrypted_root_private_key", EmitDefaultValue=false)]
        public string EncryptedRootPrivateKey { get; set; }

        /// <summary>
        /// A hash of master passphrase. The hash should be an output of a Scrypt function with the following parameters: - logN &#x3D; 14 - r &#x3D; 8 - p &#x3D; 1 
        /// </summary>
        /// <value>A hash of master passphrase. The hash should be an output of a Scrypt function with the following parameters: - logN &#x3D; 14 - r &#x3D; 8 - p &#x3D; 1 </value>
        [DataMember(Name="passphrase_hash", EmitDefaultValue=false)]
        public string PassphraseHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiByronWalletRandomXPrvPostData {\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EncryptedRootPrivateKey: ").Append(EncryptedRootPrivateKey).Append("\n");
            sb.Append("  PassphraseHash: ").Append(PassphraseHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiByronWalletRandomXPrvPostData);
        }

        /// <summary>
        /// Returns true if ApiByronWalletRandomXPrvPostData instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiByronWalletRandomXPrvPostData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiByronWalletRandomXPrvPostData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Style == input.Style ||
                    (this.Style != null &&
                    this.Style.Equals(input.Style))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EncryptedRootPrivateKey == input.EncryptedRootPrivateKey ||
                    (this.EncryptedRootPrivateKey != null &&
                    this.EncryptedRootPrivateKey.Equals(input.EncryptedRootPrivateKey))
                ) && 
                (
                    this.PassphraseHash == input.PassphraseHash ||
                    (this.PassphraseHash != null &&
                    this.PassphraseHash.Equals(input.PassphraseHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Style != null)
                    hashCode = hashCode * 59 + this.Style.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.EncryptedRootPrivateKey != null)
                    hashCode = hashCode * 59 + this.EncryptedRootPrivateKey.GetHashCode();
                if (this.PassphraseHash != null)
                    hashCode = hashCode * 59 + this.PassphraseHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

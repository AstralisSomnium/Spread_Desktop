/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WalletswalletIdtransactionsMint
    /// </summary>
    [DataContract]
        public partial class WalletswalletIdtransactionsMint :  IEquatable<WalletswalletIdtransactionsMint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletswalletIdtransactionsMint" /> class.
        /// </summary>
        /// <param name="policyId">A unique identifier of the asset&#x27;s monetary policy. The policy controls how assets of this kind are created and destroyed.  The contents are the blake2b-224 hash of the monetary policy script, encoded in hexadecimal.  (required).</param>
        /// <param name="assetName">The asset on-chain type which acts as a sub-identifier within a policy. Although we call it \&quot;asset name\&quot;, the value needn&#x27;t be text, and it could even be empty.  For policies with a single fungible asset item, asset name is typically an empty string.  This value can be up to 32 bytes of arbitrary data (which is 64 hexadecimal digits).  (required).</param>
        /// <param name="fingerprint">A user-facing short fingerprint which combines the &#x60;policy_id&#x60; and &#x60;asset_name&#x60; to allow for an easier human comparison of assets. Note that it is generally **not okay** to use this fingerprint as a unique identifier for it is not collision resistant. Yet within the context of a single wallet, it makes for a (rather) short user-facing comparison mean. .</param>
        /// <param name="quantity">Positive values mean creation and negative values mean destruction.  (required).</param>
        public WalletswalletIdtransactionsMint(string policyId = default(string), string assetName = default(string), string fingerprint = default(string), int? quantity = default(int?))
        {
            // to ensure "policyId" is required (not null)
            if (policyId == null)
            {
                throw new InvalidDataException("policyId is a required property for WalletswalletIdtransactionsMint and cannot be null");
            }
            else
            {
                this.PolicyId = policyId;
            }
            // to ensure "assetName" is required (not null)
            if (assetName == null)
            {
                throw new InvalidDataException("assetName is a required property for WalletswalletIdtransactionsMint and cannot be null");
            }
            else
            {
                this.AssetName = assetName;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for WalletswalletIdtransactionsMint and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            this.Fingerprint = fingerprint;
        }
        
        /// <summary>
        /// A unique identifier of the asset&#x27;s monetary policy. The policy controls how assets of this kind are created and destroyed.  The contents are the blake2b-224 hash of the monetary policy script, encoded in hexadecimal. 
        /// </summary>
        /// <value>A unique identifier of the asset&#x27;s monetary policy. The policy controls how assets of this kind are created and destroyed.  The contents are the blake2b-224 hash of the monetary policy script, encoded in hexadecimal. </value>
        [DataMember(Name="policy_id", EmitDefaultValue=false)]
        public string PolicyId { get; set; }

        /// <summary>
        /// The asset on-chain type which acts as a sub-identifier within a policy. Although we call it \&quot;asset name\&quot;, the value needn&#x27;t be text, and it could even be empty.  For policies with a single fungible asset item, asset name is typically an empty string.  This value can be up to 32 bytes of arbitrary data (which is 64 hexadecimal digits). 
        /// </summary>
        /// <value>The asset on-chain type which acts as a sub-identifier within a policy. Although we call it \&quot;asset name\&quot;, the value needn&#x27;t be text, and it could even be empty.  For policies with a single fungible asset item, asset name is typically an empty string.  This value can be up to 32 bytes of arbitrary data (which is 64 hexadecimal digits). </value>
        [DataMember(Name="asset_name", EmitDefaultValue=false)]
        public string AssetName { get; set; }

        /// <summary>
        /// A user-facing short fingerprint which combines the &#x60;policy_id&#x60; and &#x60;asset_name&#x60; to allow for an easier human comparison of assets. Note that it is generally **not okay** to use this fingerprint as a unique identifier for it is not collision resistant. Yet within the context of a single wallet, it makes for a (rather) short user-facing comparison mean. 
        /// </summary>
        /// <value>A user-facing short fingerprint which combines the &#x60;policy_id&#x60; and &#x60;asset_name&#x60; to allow for an easier human comparison of assets. Note that it is generally **not okay** to use this fingerprint as a unique identifier for it is not collision resistant. Yet within the context of a single wallet, it makes for a (rather) short user-facing comparison mean. </value>
        [DataMember(Name="fingerprint", EmitDefaultValue=false)]
        public string Fingerprint { get; set; }

        /// <summary>
        /// Positive values mean creation and negative values mean destruction. 
        /// </summary>
        /// <value>Positive values mean creation and negative values mean destruction. </value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WalletswalletIdtransactionsMint {\n");
            sb.Append("  PolicyId: ").Append(PolicyId).Append("\n");
            sb.Append("  AssetName: ").Append(AssetName).Append("\n");
            sb.Append("  Fingerprint: ").Append(Fingerprint).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WalletswalletIdtransactionsMint);
        }

        /// <summary>
        /// Returns true if WalletswalletIdtransactionsMint instances are equal
        /// </summary>
        /// <param name="input">Instance of WalletswalletIdtransactionsMint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletswalletIdtransactionsMint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PolicyId == input.PolicyId ||
                    (this.PolicyId != null &&
                    this.PolicyId.Equals(input.PolicyId))
                ) && 
                (
                    this.AssetName == input.AssetName ||
                    (this.AssetName != null &&
                    this.AssetName.Equals(input.AssetName))
                ) && 
                (
                    this.Fingerprint == input.Fingerprint ||
                    (this.Fingerprint != null &&
                    this.Fingerprint.Equals(input.Fingerprint))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PolicyId != null)
                    hashCode = hashCode * 59 + this.PolicyId.GetHashCode();
                if (this.AssetName != null)
                    hashCode = hashCode * 59 + this.AssetName.GetHashCode();
                if (this.Fingerprint != null)
                    hashCode = hashCode * 59 + this.Fingerprint.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

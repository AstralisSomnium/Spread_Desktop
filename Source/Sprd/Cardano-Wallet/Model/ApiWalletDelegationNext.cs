/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Next delegation status becomes active at the start of the second epoch after the corresponding delegation certificate was discovered. The exact moment is specified by changes_at
    /// </summary>
    [DataContract]
        public partial class ApiWalletDelegationNext :  IEquatable<ApiWalletDelegationNext>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Notdelegating for value: not_delegating
            /// </summary>
            [EnumMember(Value = "not_delegating")]
            Notdelegating = 1,
            /// <summary>
            /// Enum Delegating for value: delegating
            /// </summary>
            [EnumMember(Value = "delegating")]
            Delegating = 2        }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiWalletDelegationNext" /> class.
        /// </summary>
        /// <param name="status">status (required).</param>
        /// <param name="target">A unique Stake-Pool identifier (present only if status &#x3D; &#x60;delegating&#x60;).</param>
        /// <param name="changesAt">changesAt (required).</param>
        public ApiWalletDelegationNext(StatusEnum status = default(StatusEnum), string target = default(string), WalletsDelegationChangesAt changesAt = default(WalletsDelegationChangesAt))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for ApiWalletDelegationNext and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "changesAt" is required (not null)
            if (changesAt == null)
            {
                throw new InvalidDataException("changesAt is a required property for ApiWalletDelegationNext and cannot be null");
            }
            else
            {
                this.ChangesAt = changesAt;
            }
            this.Target = target;
        }
        

        /// <summary>
        /// A unique Stake-Pool identifier (present only if status &#x3D; &#x60;delegating&#x60;)
        /// </summary>
        /// <value>A unique Stake-Pool identifier (present only if status &#x3D; &#x60;delegating&#x60;)</value>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public string Target { get; set; }

        /// <summary>
        /// Gets or Sets ChangesAt
        /// </summary>
        [DataMember(Name="changes_at", EmitDefaultValue=false)]
        public WalletsDelegationChangesAt ChangesAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiWalletDelegationNext {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  ChangesAt: ").Append(ChangesAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiWalletDelegationNext);
        }

        /// <summary>
        /// Returns true if ApiWalletDelegationNext instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiWalletDelegationNext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiWalletDelegationNext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.ChangesAt == input.ChangesAt ||
                    (this.ChangesAt != null &&
                    this.ChangesAt.Equals(input.ChangesAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                if (this.ChangesAt != null)
                    hashCode = hashCode * 59 + this.ChangesAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

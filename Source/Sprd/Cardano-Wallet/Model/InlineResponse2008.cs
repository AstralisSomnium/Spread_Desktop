/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2008
    /// </summary>
    [DataContract]
        public partial class InlineResponse2008 :  IEquatable<InlineResponse2008>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2008" /> class.
        /// </summary>
        /// <param name="inputs">A list of transaction inputs (required).</param>
        /// <param name="outputs">A list of target outputs (required).</param>
        /// <param name="change">A list of transaction change outputs. (required).</param>
        /// <param name="withdrawals">A list of withdrawals from stake addresses..</param>
        /// <param name="certificates">certificates.</param>
        /// <param name="deposits">A list of deposits associated with a transaction..</param>
        /// <param name="metadata">Transaction metadata, serialized according to the expected on-chain binary format, base64-encoded..</param>
        public InlineResponse2008(List<ApiCoinSelectionInputs> inputs = default(List<ApiCoinSelectionInputs>), List<WalletswalletIdpaymentfeesPayments> outputs = default(List<WalletswalletIdpaymentfeesPayments>), List<ApiCoinSelectionChange> change = default(List<ApiCoinSelectionChange>), List<ApiCoinSelectionWithdrawals> withdrawals = default(List<ApiCoinSelectionWithdrawals>), List<ApiCoinSelectionCertificates> certificates = default(List<ApiCoinSelectionCertificates>), List<WalletswalletIdpaymentfeesAmount> deposits = default(List<WalletswalletIdpaymentfeesAmount>), string metadata = default(string))
        {
            // to ensure "inputs" is required (not null)
            if (inputs == null)
            {
                throw new InvalidDataException("inputs is a required property for InlineResponse2008 and cannot be null");
            }
            else
            {
                this.Inputs = inputs;
            }
            // to ensure "outputs" is required (not null)
            if (outputs == null)
            {
                throw new InvalidDataException("outputs is a required property for InlineResponse2008 and cannot be null");
            }
            else
            {
                this.Outputs = outputs;
            }
            // to ensure "change" is required (not null)
            if (change == null)
            {
                throw new InvalidDataException("change is a required property for InlineResponse2008 and cannot be null");
            }
            else
            {
                this.Change = change;
            }
            this.Withdrawals = withdrawals;
            this.Certificates = certificates;
            this.Deposits = deposits;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// A list of transaction inputs
        /// </summary>
        /// <value>A list of transaction inputs</value>
        [DataMember(Name="inputs", EmitDefaultValue=false)]
        public List<ApiCoinSelectionInputs> Inputs { get; set; }

        /// <summary>
        /// A list of target outputs
        /// </summary>
        /// <value>A list of target outputs</value>
        [DataMember(Name="outputs", EmitDefaultValue=false)]
        public List<WalletswalletIdpaymentfeesPayments> Outputs { get; set; }

        /// <summary>
        /// A list of transaction change outputs.
        /// </summary>
        /// <value>A list of transaction change outputs.</value>
        [DataMember(Name="change", EmitDefaultValue=false)]
        public List<ApiCoinSelectionChange> Change { get; set; }

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>
        /// <value>A list of withdrawals from stake addresses.</value>
        [DataMember(Name="withdrawals", EmitDefaultValue=false)]
        public List<ApiCoinSelectionWithdrawals> Withdrawals { get; set; }

        /// <summary>
        /// Gets or Sets Certificates
        /// </summary>
        [DataMember(Name="certificates", EmitDefaultValue=false)]
        public List<ApiCoinSelectionCertificates> Certificates { get; set; }

        /// <summary>
        /// A list of deposits associated with a transaction.
        /// </summary>
        /// <value>A list of deposits associated with a transaction.</value>
        [DataMember(Name="deposits", EmitDefaultValue=false)]
        public List<WalletswalletIdpaymentfeesAmount> Deposits { get; set; }

        /// <summary>
        /// Transaction metadata, serialized according to the expected on-chain binary format, base64-encoded.
        /// </summary>
        /// <value>Transaction metadata, serialized according to the expected on-chain binary format, base64-encoded.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2008 {\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  Change: ").Append(Change).Append("\n");
            sb.Append("  Withdrawals: ").Append(Withdrawals).Append("\n");
            sb.Append("  Certificates: ").Append(Certificates).Append("\n");
            sb.Append("  Deposits: ").Append(Deposits).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2008);
        }

        /// <summary>
        /// Returns true if InlineResponse2008 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2008 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2008 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.Outputs == input.Outputs ||
                    this.Outputs != null &&
                    input.Outputs != null &&
                    this.Outputs.SequenceEqual(input.Outputs)
                ) && 
                (
                    this.Change == input.Change ||
                    this.Change != null &&
                    input.Change != null &&
                    this.Change.SequenceEqual(input.Change)
                ) && 
                (
                    this.Withdrawals == input.Withdrawals ||
                    this.Withdrawals != null &&
                    input.Withdrawals != null &&
                    this.Withdrawals.SequenceEqual(input.Withdrawals)
                ) && 
                (
                    this.Certificates == input.Certificates ||
                    this.Certificates != null &&
                    input.Certificates != null &&
                    this.Certificates.SequenceEqual(input.Certificates)
                ) && 
                (
                    this.Deposits == input.Deposits ||
                    this.Deposits != null &&
                    input.Deposits != null &&
                    this.Deposits.SequenceEqual(input.Deposits)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.Outputs != null)
                    hashCode = hashCode * 59 + this.Outputs.GetHashCode();
                if (this.Change != null)
                    hashCode = hashCode * 59 + this.Change.GetHashCode();
                if (this.Withdrawals != null)
                    hashCode = hashCode * 59 + this.Withdrawals.GetHashCode();
                if (this.Certificates != null)
                    hashCode = hashCode * 59 + this.Certificates.GetHashCode();
                if (this.Deposits != null)
                    hashCode = hashCode * 59 + this.Deposits.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

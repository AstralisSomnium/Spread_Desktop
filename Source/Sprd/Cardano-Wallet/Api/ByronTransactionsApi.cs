/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IByronTransactionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Forget
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Forget pending Byron transaction. Importantly, a transaction, when sent, cannot be cancelled. One can only request forgetting about it in order to try spending (concurrently) the same UTxO in another transaction. But, the transaction may still show up later in a block and therefore, appear in the wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns></returns>
        void DeleteByronTransaction (string walletId, string transactionId);

        /// <summary>
        /// Forget
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Forget pending Byron transaction. Importantly, a transaction, when sent, cannot be cancelled. One can only request forgetting about it in order to try spending (concurrently) the same UTxO in another transaction. But, the transaction may still show up later in a block and therefore, appear in the wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteByronTransactionWithHttpInfo (string walletId, string transactionId);
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Get transaction by id. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns>InlineResponse2021</returns>
        InlineResponse2021 GetByronTransaction (string walletId, string transactionId);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Get transaction by id. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of InlineResponse2021</returns>
        ApiResponse<InlineResponse2021> GetByronTransactionWithHttpInfo (string walletId, string transactionId);
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all incoming and outgoing transactions for the given wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="start">An optional start time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="end">An optional end time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="order">An optional sort order. (optional, default to descending)</param>
        /// <returns>List&lt;InlineResponse2004&gt;</returns>
        List<InlineResponse2004> ListByronTransactions (string walletId, string start = null, string end = null, string order = null);

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all incoming and outgoing transactions for the given wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="start">An optional start time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="end">An optional end time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="order">An optional sort order. (optional, default to descending)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2004&gt;</returns>
        ApiResponse<List<InlineResponse2004>> ListByronTransactionsWithHttpInfo (string walletId, string start = null, string end = null, string order = null);
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Create and send transaction from the wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>InlineResponse2021</returns>
        InlineResponse2021 PostByronTransaction (Body18 body, string walletId);

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Create and send transaction from the wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>ApiResponse of InlineResponse2021</returns>
        ApiResponse<InlineResponse2021> PostByronTransactionWithHttpInfo (Body18 body, string walletId);
        /// <summary>
        /// Estimate Fee
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for the transaction. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>InlineResponse202</returns>
        InlineResponse202 PostByronTransactionFee (Body17 body, string walletId);

        /// <summary>
        /// Estimate Fee
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for the transaction. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        ApiResponse<InlineResponse202> PostByronTransactionFeeWithHttpInfo (Body17 body, string walletId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Forget
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Forget pending Byron transaction. Importantly, a transaction, when sent, cannot be cancelled. One can only request forgetting about it in order to try spending (concurrently) the same UTxO in another transaction. But, the transaction may still show up later in a block and therefore, appear in the wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteByronTransactionAsync (string walletId, string transactionId);

        /// <summary>
        /// Forget
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Forget pending Byron transaction. Importantly, a transaction, when sent, cannot be cancelled. One can only request forgetting about it in order to try spending (concurrently) the same UTxO in another transaction. But, the transaction may still show up later in a block and therefore, appear in the wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteByronTransactionAsyncWithHttpInfo (string walletId, string transactionId);
        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Get transaction by id. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of InlineResponse2021</returns>
        System.Threading.Tasks.Task<InlineResponse2021> GetByronTransactionAsync (string walletId, string transactionId);

        /// <summary>
        /// Get
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Get transaction by id. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2021>> GetByronTransactionAsyncWithHttpInfo (string walletId, string transactionId);
        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all incoming and outgoing transactions for the given wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="start">An optional start time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="end">An optional end time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="order">An optional sort order. (optional, default to descending)</param>
        /// <returns>Task of List&lt;InlineResponse2004&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2004>> ListByronTransactionsAsync (string walletId, string start = null, string end = null, string order = null);

        /// <summary>
        /// List
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all incoming and outgoing transactions for the given wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="start">An optional start time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="end">An optional end time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="order">An optional sort order. (optional, default to descending)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2004&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2004>>> ListByronTransactionsAsyncWithHttpInfo (string walletId, string start = null, string end = null, string order = null);
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Create and send transaction from the wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of InlineResponse2021</returns>
        System.Threading.Tasks.Task<InlineResponse2021> PostByronTransactionAsync (Body18 body, string walletId);

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Create and send transaction from the wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2021>> PostByronTransactionAsyncWithHttpInfo (Body18 body, string walletId);
        /// <summary>
        /// Estimate Fee
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for the transaction. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of InlineResponse202</returns>
        System.Threading.Tasks.Task<InlineResponse202> PostByronTransactionFeeAsync (Body17 body, string walletId);

        /// <summary>
        /// Estimate Fee
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for the transaction. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> PostByronTransactionFeeAsyncWithHttpInfo (Body17 body, string walletId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ByronTransactionsApi : IByronTransactionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ByronTransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ByronTransactionsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ByronTransactionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ByronTransactionsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ByronTransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ByronTransactionsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Forget &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Forget pending Byron transaction. Importantly, a transaction, when sent, cannot be cancelled. One can only request forgetting about it in order to try spending (concurrently) the same UTxO in another transaction. But, the transaction may still show up later in a block and therefore, appear in the wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns></returns>
        public void DeleteByronTransaction (string walletId, string transactionId)
        {
             DeleteByronTransactionWithHttpInfo(walletId, transactionId);
        }

        /// <summary>
        /// Forget &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Forget pending Byron transaction. Importantly, a transaction, when sent, cannot be cancelled. One can only request forgetting about it in order to try spending (concurrently) the same UTxO in another transaction. But, the transaction may still show up later in a block and therefore, appear in the wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteByronTransactionWithHttpInfo (string walletId, string transactionId)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling ByronTransactionsApi->DeleteByronTransaction");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling ByronTransactionsApi->DeleteByronTransaction");

            var localVarPath = "/byron-wallets/{walletId}/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteByronTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Forget &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Forget pending Byron transaction. Importantly, a transaction, when sent, cannot be cancelled. One can only request forgetting about it in order to try spending (concurrently) the same UTxO in another transaction. But, the transaction may still show up later in a block and therefore, appear in the wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteByronTransactionAsync (string walletId, string transactionId)
        {
             await DeleteByronTransactionAsyncWithHttpInfo(walletId, transactionId);

        }

        /// <summary>
        /// Forget &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Forget pending Byron transaction. Importantly, a transaction, when sent, cannot be cancelled. One can only request forgetting about it in order to try spending (concurrently) the same UTxO in another transaction. But, the transaction may still show up later in a block and therefore, appear in the wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteByronTransactionAsyncWithHttpInfo (string walletId, string transactionId)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling ByronTransactionsApi->DeleteByronTransaction");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling ByronTransactionsApi->DeleteByronTransaction");

            var localVarPath = "/byron-wallets/{walletId}/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteByronTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Get transaction by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns>InlineResponse2021</returns>
        public InlineResponse2021 GetByronTransaction (string walletId, string transactionId)
        {
             ApiResponse<InlineResponse2021> localVarResponse = GetByronTransactionWithHttpInfo(walletId, transactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Get transaction by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of InlineResponse2021</returns>
        public ApiResponse< InlineResponse2021 > GetByronTransactionWithHttpInfo (string walletId, string transactionId)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling ByronTransactionsApi->GetByronTransaction");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling ByronTransactionsApi->GetByronTransaction");

            var localVarPath = "/byron-wallets/{walletId}/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByronTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2021)));
        }

        /// <summary>
        /// Get &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Get transaction by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of InlineResponse2021</returns>
        public async System.Threading.Tasks.Task<InlineResponse2021> GetByronTransactionAsync (string walletId, string transactionId)
        {
             ApiResponse<InlineResponse2021> localVarResponse = await GetByronTransactionAsyncWithHttpInfo(walletId, transactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Get transaction by id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2021>> GetByronTransactionAsyncWithHttpInfo (string walletId, string transactionId)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling ByronTransactionsApi->GetByronTransaction");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling ByronTransactionsApi->GetByronTransaction");

            var localVarPath = "/byron-wallets/{walletId}/transactions/{transactionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByronTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2021)));
        }

        /// <summary>
        /// List &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all incoming and outgoing transactions for the given wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="start">An optional start time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="end">An optional end time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="order">An optional sort order. (optional, default to descending)</param>
        /// <returns>List&lt;InlineResponse2004&gt;</returns>
        public List<InlineResponse2004> ListByronTransactions (string walletId, string start = null, string end = null, string order = null)
        {
             ApiResponse<List<InlineResponse2004>> localVarResponse = ListByronTransactionsWithHttpInfo(walletId, start, end, order);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all incoming and outgoing transactions for the given wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="start">An optional start time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="end">An optional end time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="order">An optional sort order. (optional, default to descending)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2004&gt;</returns>
        public ApiResponse< List<InlineResponse2004> > ListByronTransactionsWithHttpInfo (string walletId, string start = null, string end = null, string order = null)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling ByronTransactionsApi->ListByronTransactions");

            var localVarPath = "/byron-wallets/{walletId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListByronTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2004>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2004>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2004>)));
        }

        /// <summary>
        /// List &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all incoming and outgoing transactions for the given wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="start">An optional start time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="end">An optional end time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="order">An optional sort order. (optional, default to descending)</param>
        /// <returns>Task of List&lt;InlineResponse2004&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2004>> ListByronTransactionsAsync (string walletId, string start = null, string end = null, string order = null)
        {
             ApiResponse<List<InlineResponse2004>> localVarResponse = await ListByronTransactionsAsyncWithHttpInfo(walletId, start, end, order);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  List all incoming and outgoing transactions for the given wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="start">An optional start time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="end">An optional end time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;  (optional)</param>
        /// <param name="order">An optional sort order. (optional, default to descending)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2004&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2004>>> ListByronTransactionsAsyncWithHttpInfo (string walletId, string start = null, string end = null, string order = null)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling ByronTransactionsApi->ListByronTransactions");

            var localVarPath = "/byron-wallets/{walletId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListByronTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2004>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2004>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2004>)));
        }

        /// <summary>
        /// Create &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Create and send transaction from the wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>InlineResponse2021</returns>
        public InlineResponse2021 PostByronTransaction (Body18 body, string walletId)
        {
             ApiResponse<InlineResponse2021> localVarResponse = PostByronTransactionWithHttpInfo(body, walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Create and send transaction from the wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>ApiResponse of InlineResponse2021</returns>
        public ApiResponse< InlineResponse2021 > PostByronTransactionWithHttpInfo (Body18 body, string walletId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ByronTransactionsApi->PostByronTransaction");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling ByronTransactionsApi->PostByronTransaction");

            var localVarPath = "/byron-wallets/{walletId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostByronTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2021)));
        }

        /// <summary>
        /// Create &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Create and send transaction from the wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of InlineResponse2021</returns>
        public async System.Threading.Tasks.Task<InlineResponse2021> PostByronTransactionAsync (Body18 body, string walletId)
        {
             ApiResponse<InlineResponse2021> localVarResponse = await PostByronTransactionAsyncWithHttpInfo(body, walletId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Create and send transaction from the wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2021>> PostByronTransactionAsyncWithHttpInfo (Body18 body, string walletId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ByronTransactionsApi->PostByronTransaction");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling ByronTransactionsApi->PostByronTransaction");

            var localVarPath = "/byron-wallets/{walletId}/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostByronTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2021)));
        }

        /// <summary>
        /// Estimate Fee &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for the transaction. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>InlineResponse202</returns>
        public InlineResponse202 PostByronTransactionFee (Body17 body, string walletId)
        {
             ApiResponse<InlineResponse202> localVarResponse = PostByronTransactionFeeWithHttpInfo(body, walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Estimate Fee &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for the transaction. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        public ApiResponse< InlineResponse202 > PostByronTransactionFeeWithHttpInfo (Body17 body, string walletId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ByronTransactionsApi->PostByronTransactionFee");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling ByronTransactionsApi->PostByronTransactionFee");

            var localVarPath = "/byron-wallets/{walletId}/payment-fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostByronTransactionFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse202>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse202) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse202)));
        }

        /// <summary>
        /// Estimate Fee &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for the transaction. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of InlineResponse202</returns>
        public async System.Threading.Tasks.Task<InlineResponse202> PostByronTransactionFeeAsync (Body17 body, string walletId)
        {
             ApiResponse<InlineResponse202> localVarResponse = await PostByronTransactionFeeAsyncWithHttpInfo(body, walletId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Estimate Fee &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt;  Estimate fee for the transaction. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> PostByronTransactionFeeAsyncWithHttpInfo (Body17 body, string walletId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ByronTransactionsApi->PostByronTransactionFee");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling ByronTransactionsApi->PostByronTransactionFee");

            var localVarPath = "/byron-wallets/{walletId}/payment-fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostByronTransactionFee", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse202>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse202) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse202)));
        }

    }
}

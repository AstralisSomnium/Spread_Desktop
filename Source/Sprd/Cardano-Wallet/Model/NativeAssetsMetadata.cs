/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// In the Mary era of Cardano, UTxO may contain native assets. These assets are represented on-chain by opaque identifiers which are meaningless to end-users. Therefore, user-facing metadata regarding each token must be stored off-chain, in a metadata registry.  Token creators may publish metadata into the registry and client applications can consume these metadata for display to end users. This will work in a similar way to how it is done for stake pool metadata. 
    /// </summary>
    [DataContract]
        public partial class NativeAssetsMetadata :  IEquatable<NativeAssetsMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NativeAssetsMetadata" /> class.
        /// </summary>
        /// <param name="name">A human-readable name for the asset. Good for display in user interfaces.  (required).</param>
        /// <param name="description">A human-readable description for the asset. Good for display in user interfaces.  (required).</param>
        /// <param name="acronym">A human-readable short name for the asset. Good for display in user interfaces. .</param>
        /// <param name="unit">unit.</param>
        /// <param name="url">A URL to the policy&#x27;s owner(s) or the entity website in charge of the asset. .</param>
        /// <param name="logo">A base64-encoded &#x60;image/png&#x60; for displaying the asset. The end image can be expected to be smaller than 64KB. .</param>
        public NativeAssetsMetadata(string name = default(string), string description = default(string), string acronym = default(string), NativeAssetsMetadataUnit unit = default(NativeAssetsMetadataUnit), string url = default(string), string logo = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for NativeAssetsMetadata and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for NativeAssetsMetadata and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            this.Acronym = acronym;
            this.Unit = unit;
            this.Url = url;
            this.Logo = logo;
        }
        
        /// <summary>
        /// A human-readable name for the asset. Good for display in user interfaces. 
        /// </summary>
        /// <value>A human-readable name for the asset. Good for display in user interfaces. </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// A human-readable description for the asset. Good for display in user interfaces. 
        /// </summary>
        /// <value>A human-readable description for the asset. Good for display in user interfaces. </value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// A human-readable short name for the asset. Good for display in user interfaces. 
        /// </summary>
        /// <value>A human-readable short name for the asset. Good for display in user interfaces. </value>
        [DataMember(Name="acronym", EmitDefaultValue=false)]
        public string Acronym { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public NativeAssetsMetadataUnit Unit { get; set; }

        /// <summary>
        /// A URL to the policy&#x27;s owner(s) or the entity website in charge of the asset. 
        /// </summary>
        /// <value>A URL to the policy&#x27;s owner(s) or the entity website in charge of the asset. </value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// A base64-encoded &#x60;image/png&#x60; for displaying the asset. The end image can be expected to be smaller than 64KB. 
        /// </summary>
        /// <value>A base64-encoded &#x60;image/png&#x60; for displaying the asset. The end image can be expected to be smaller than 64KB. </value>
        [DataMember(Name="logo", EmitDefaultValue=false)]
        public string Logo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NativeAssetsMetadata {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Acronym: ").Append(Acronym).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NativeAssetsMetadata);
        }

        /// <summary>
        /// Returns true if NativeAssetsMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of NativeAssetsMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NativeAssetsMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Acronym == input.Acronym ||
                    (this.Acronym != null &&
                    this.Acronym.Equals(input.Acronym))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Acronym != null)
                    hashCode = hashCode * 59 + this.Acronym.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Logo != null)
                    hashCode = hashCode * 59 + this.Logo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

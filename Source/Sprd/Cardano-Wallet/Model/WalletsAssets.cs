/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Current non-Ada asset holdings of the wallet.  The amount of assets available to spend may be less than the total unspent assets due to transaction change amounts which are yet to be fully confirmed (pending). 
    /// </summary>
    [DataContract]
        public partial class WalletsAssets :  IEquatable<WalletsAssets>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletsAssets" /> class.
        /// </summary>
        /// <param name="available">Available UTxO asset balances (funds that can be spent without condition).  (required).</param>
        /// <param name="total">Total asset balances (available balances plus pending change balances).  (required).</param>
        public WalletsAssets(List<WalletsAssetsAvailable> available = default(List<WalletsAssetsAvailable>), List<WalletsAssetsAvailable> total = default(List<WalletsAssetsAvailable>))
        {
            // to ensure "available" is required (not null)
            if (available == null)
            {
                throw new InvalidDataException("available is a required property for WalletsAssets and cannot be null");
            }
            else
            {
                this.Available = available;
            }
            // to ensure "total" is required (not null)
            if (total == null)
            {
                throw new InvalidDataException("total is a required property for WalletsAssets and cannot be null");
            }
            else
            {
                this.Total = total;
            }
        }
        
        /// <summary>
        /// Available UTxO asset balances (funds that can be spent without condition). 
        /// </summary>
        /// <value>Available UTxO asset balances (funds that can be spent without condition). </value>
        [DataMember(Name="available", EmitDefaultValue=false)]
        public List<WalletsAssetsAvailable> Available { get; set; }

        /// <summary>
        /// Total asset balances (available balances plus pending change balances). 
        /// </summary>
        /// <value>Total asset balances (available balances plus pending change balances). </value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public List<WalletsAssetsAvailable> Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WalletsAssets {\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WalletsAssets);
        }

        /// <summary>
        /// Returns true if WalletsAssets instances are equal
        /// </summary>
        /// <param name="input">Instance of WalletsAssets to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletsAssets input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Available == input.Available ||
                    this.Available != null &&
                    input.Available != null &&
                    this.Available.SequenceEqual(input.Available)
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total != null &&
                    input.Total != null &&
                    this.Total.SequenceEqual(input.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Available != null)
                    hashCode = hashCode * 59 + this.Available.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

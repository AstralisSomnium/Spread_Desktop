/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiWalletPutPassphraseData
    /// </summary>
    [DataContract]
        public partial class ApiWalletPutPassphraseData :  IEquatable<ApiWalletPutPassphraseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiWalletPutPassphraseData" /> class.
        /// </summary>
        /// <param name="oldPassphrase">The current passphrase. (required).</param>
        /// <param name="newPassphrase">A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds). (required).</param>
        public ApiWalletPutPassphraseData(string oldPassphrase = default(string), string newPassphrase = default(string))
        {
            // to ensure "oldPassphrase" is required (not null)
            if (oldPassphrase == null)
            {
                throw new InvalidDataException("oldPassphrase is a required property for ApiWalletPutPassphraseData and cannot be null");
            }
            else
            {
                this.OldPassphrase = oldPassphrase;
            }
            // to ensure "newPassphrase" is required (not null)
            if (newPassphrase == null)
            {
                throw new InvalidDataException("newPassphrase is a required property for ApiWalletPutPassphraseData and cannot be null");
            }
            else
            {
                this.NewPassphrase = newPassphrase;
            }
        }
        
        /// <summary>
        /// The current passphrase.
        /// </summary>
        /// <value>The current passphrase.</value>
        [DataMember(Name="old_passphrase", EmitDefaultValue=false)]
        public string OldPassphrase { get; set; }

        /// <summary>
        /// A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds).
        /// </summary>
        /// <value>A master passphrase to lock and protect the wallet for sensitive operation (e.g. sending funds).</value>
        [DataMember(Name="new_passphrase", EmitDefaultValue=false)]
        public string NewPassphrase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiWalletPutPassphraseData {\n");
            sb.Append("  OldPassphrase: ").Append(OldPassphrase).Append("\n");
            sb.Append("  NewPassphrase: ").Append(NewPassphrase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiWalletPutPassphraseData);
        }

        /// <summary>
        /// Returns true if ApiWalletPutPassphraseData instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiWalletPutPassphraseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiWalletPutPassphraseData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OldPassphrase == input.OldPassphrase ||
                    (this.OldPassphrase != null &&
                    this.OldPassphrase.Equals(input.OldPassphrase))
                ) && 
                (
                    this.NewPassphrase == input.NewPassphrase ||
                    (this.NewPassphrase != null &&
                    this.NewPassphrase.Equals(input.NewPassphrase))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OldPassphrase != null)
                    hashCode = hashCode * 59 + this.OldPassphrase.GetHashCode();
                if (this.NewPassphrase != null)
                    hashCode = hashCode * 59 + this.NewPassphrase.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

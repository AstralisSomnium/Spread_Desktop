/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IKeysApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Return a public key for a given role and derivation index.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Soft&#x60; indexes are supported by this endpoint. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="role"></param>
        /// <param name="index"></param>
        /// <returns>string</returns>
        string GetWalletKey (string walletId, string role, string index);

        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Return a public key for a given role and derivation index.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Soft&#x60; indexes are supported by this endpoint. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="role"></param>
        /// <param name="index"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetWalletKeyWithHttpInfo (string walletId, string role, string index);
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Retrieve account public key from the wallet.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Hard&#x60; indexes are supported by this endpoint. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <param name="index"></param>
        /// <returns>string</returns>
        string PostAccountKey (Body6 body, string walletId, string index);

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Retrieve account public key from the wallet.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Hard&#x60; indexes are supported by this endpoint. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <param name="index"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostAccountKeyWithHttpInfo (Body6 body, string walletId, string index);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Return a public key for a given role and derivation index.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Soft&#x60; indexes are supported by this endpoint. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="role"></param>
        /// <param name="index"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetWalletKeyAsync (string walletId, string role, string index);

        /// <summary>
        /// Get Public Key
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Return a public key for a given role and derivation index.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Soft&#x60; indexes are supported by this endpoint. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="role"></param>
        /// <param name="index"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetWalletKeyAsyncWithHttpInfo (string walletId, string role, string index);
        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Retrieve account public key from the wallet.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Hard&#x60; indexes are supported by this endpoint. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <param name="index"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostAccountKeyAsync (Body6 body, string walletId, string index);

        /// <summary>
        /// Create
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Retrieve account public key from the wallet.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Hard&#x60; indexes are supported by this endpoint. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <param name="index"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostAccountKeyAsyncWithHttpInfo (Body6 body, string walletId, string index);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class KeysApi : IKeysApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KeysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KeysApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeysApi"/> class
        /// </summary>
        /// <returns></returns>
        public KeysApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeysApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KeysApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Public Key &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Return a public key for a given role and derivation index.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Soft&#x60; indexes are supported by this endpoint. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="role"></param>
        /// <param name="index"></param>
        /// <returns>string</returns>
        public string GetWalletKey (string walletId, string role, string index)
        {
             ApiResponse<string> localVarResponse = GetWalletKeyWithHttpInfo(walletId, role, index);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Public Key &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Return a public key for a given role and derivation index.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Soft&#x60; indexes are supported by this endpoint. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="role"></param>
        /// <param name="index"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetWalletKeyWithHttpInfo (string walletId, string role, string index)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling KeysApi->GetWalletKey");
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling KeysApi->GetWalletKey");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling KeysApi->GetWalletKey");

            var localVarPath = "/wallets/{walletId}/keys/{role}/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (role != null) localVarPathParams.Add("role", this.Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get Public Key &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Return a public key for a given role and derivation index.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Soft&#x60; indexes are supported by this endpoint. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="role"></param>
        /// <param name="index"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetWalletKeyAsync (string walletId, string role, string index)
        {
             ApiResponse<string> localVarResponse = await GetWalletKeyAsyncWithHttpInfo(walletId, role, index);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Public Key &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Return a public key for a given role and derivation index.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Soft&#x60; indexes are supported by this endpoint. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <param name="role"></param>
        /// <param name="index"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetWalletKeyAsyncWithHttpInfo (string walletId, string role, string index)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling KeysApi->GetWalletKey");
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling KeysApi->GetWalletKey");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling KeysApi->GetWalletKey");

            var localVarPath = "/wallets/{walletId}/keys/{role}/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (role != null) localVarPathParams.Add("role", this.Configuration.ApiClient.ParameterToString(role)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWalletKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Retrieve account public key from the wallet.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Hard&#x60; indexes are supported by this endpoint. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <param name="index"></param>
        /// <returns>string</returns>
        public string PostAccountKey (Body6 body, string walletId, string index)
        {
             ApiResponse<string> localVarResponse = PostAccountKeyWithHttpInfo(body, walletId, index);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Retrieve account public key from the wallet.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Hard&#x60; indexes are supported by this endpoint. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <param name="index"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostAccountKeyWithHttpInfo (Body6 body, string walletId, string index)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KeysApi->PostAccountKey");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling KeysApi->PostAccountKey");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling KeysApi->PostAccountKey");

            var localVarPath = "/wallets/{walletId}/keys/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAccountKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Create &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Retrieve account public key from the wallet.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Hard&#x60; indexes are supported by this endpoint. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <param name="index"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostAccountKeyAsync (Body6 body, string walletId, string index)
        {
             ApiResponse<string> localVarResponse = await PostAccountKeyAsyncWithHttpInfo(body, walletId, index);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;stable&lt;/strong&gt;&lt;/p&gt; Retrieve account public key from the wallet.  &lt;b&gt;Note:&lt;/b&gt; Only &#x60;Hard&#x60; indexes are supported by this endpoint. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <param name="index"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostAccountKeyAsyncWithHttpInfo (Body6 body, string walletId, string index)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling KeysApi->PostAccountKey");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling KeysApi->PostAccountKey");
            // verify the required parameter 'index' is set
            if (index == null)
                throw new ApiException(400, "Missing required parameter 'index' when calling KeysApi->PostAccountKey");

            var localVarPath = "/wallets/{walletId}/keys/{index}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (index != null) localVarPathParams.Add("index", this.Configuration.ApiClient.ParameterToString(index)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostAccountKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}

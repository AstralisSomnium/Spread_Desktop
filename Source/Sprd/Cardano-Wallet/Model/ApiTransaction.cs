/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiTransaction
    /// </summary>
    [DataContract]
        public partial class ApiTransaction :  IEquatable<ApiTransaction>, IValidatableObject
    {
        /// <summary>
        /// Defines Direction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DirectionEnum
        {
            /// <summary>
            /// Enum Outgoing for value: outgoing
            /// </summary>
            [EnumMember(Value = "outgoing")]
            Outgoing = 1,
            /// <summary>
            /// Enum Incoming for value: incoming
            /// </summary>
            [EnumMember(Value = "incoming")]
            Incoming = 2        }
        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public DirectionEnum Direction { get; set; }
        /// <summary>
        /// Current transaction status.    &#x60;&#x60;&#x60;          *- -- -- -- --*          *- -- -- -- -- --*          |         |- -- -- -- -- -&gt;  EXPIRED  |          |         |  (ttl)   *- -- -- -- -- --*   - -- -- --&gt; PENDING |          |         &lt;- -- -- -- -- -- -- -- -*          |         |                |          *- -- -- -- --*            (rollback)               |                     |          (in ledger)          *- -- -- -- -- --*               |               |           |               *- -- -- -- -- -- -- --&gt; IN_LEDGER |                               |           |                               *- -- -- -- -- --*   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <value>Current transaction status.    &#x60;&#x60;&#x60;          *- -- -- -- --*          *- -- -- -- -- --*          |         |- -- -- -- -- -&gt;  EXPIRED  |          |         |  (ttl)   *- -- -- -- -- --*   - -- -- --&gt; PENDING |          |         &lt;- -- -- -- -- -- -- -- -*          |         |                |          *- -- -- -- --*            (rollback)               |                     |          (in ledger)          *- -- -- -- -- --*               |               |           |               *- -- -- -- -- -- -- --&gt; IN_LEDGER |                               |           |                               *- -- -- -- -- --*   &#x60;&#x60;&#x60; </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,
            /// <summary>
            /// Enum Inledger for value: in_ledger
            /// </summary>
            [EnumMember(Value = "in_ledger")]
            Inledger = 2,
            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 3        }
        /// <summary>
        /// Current transaction status.    &#x60;&#x60;&#x60;          *- -- -- -- --*          *- -- -- -- -- --*          |         |- -- -- -- -- -&gt;  EXPIRED  |          |         |  (ttl)   *- -- -- -- -- --*   - -- -- --&gt; PENDING |          |         &lt;- -- -- -- -- -- -- -- -*          |         |                |          *- -- -- -- --*            (rollback)               |                     |          (in ledger)          *- -- -- -- -- --*               |               |           |               *- -- -- -- -- -- -- --&gt; IN_LEDGER |                               |           |                               *- -- -- -- -- --*   &#x60;&#x60;&#x60; 
        /// </summary>
        /// <value>Current transaction status.    &#x60;&#x60;&#x60;          *- -- -- -- --*          *- -- -- -- -- --*          |         |- -- -- -- -- -&gt;  EXPIRED  |          |         |  (ttl)   *- -- -- -- -- --*   - -- -- --&gt; PENDING |          |         &lt;- -- -- -- -- -- -- -- -*          |         |                |          *- -- -- -- --*            (rollback)               |                     |          (in ledger)          *- -- -- -- -- --*               |               |           |               *- -- -- -- -- -- -- --&gt; IN_LEDGER |                               |           |                               *- -- -- -- -- --*   &#x60;&#x60;&#x60; </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiTransaction" /> class.
        /// </summary>
        /// <param name="id">A unique identifier for this transaction (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="fee">fee (required).</param>
        /// <param name="deposit">deposit (required).</param>
        /// <param name="insertedAt">insertedAt.</param>
        /// <param name="expiresAt">expiresAt.</param>
        /// <param name="pendingSince">pendingSince.</param>
        /// <param name="depth">depth.</param>
        /// <param name="direction">direction (required).</param>
        /// <param name="inputs">A list of transaction inputs.  &#x60;assets&#x60; and &#x60;address&#x60; are always present for &#x60;outgoing&#x60; transactions but generally absent for &#x60;incoming&#x60; transactions. This information is present on the Cardano explorer, but is not tracked by the wallet.  (required).</param>
        /// <param name="outputs">A list of target outputs (required).</param>
        /// <param name="withdrawals">A list of withdrawals from stake addresses. (required).</param>
        /// <param name="mint">&lt;p&gt;status: &lt;strong&gt;⚠ under development&lt;/strong&gt;&lt;/p&gt;  _This field is not implemented yet, and will always be empty._  Assets minted (created) or unminted (destroyed)  This amount contributes to the total transaction value.  Positive values denote creation of assets and negative values denote the reverse.  (required).</param>
        /// <param name="status">Current transaction status.    &#x60;&#x60;&#x60;          *- -- -- -- --*          *- -- -- -- -- --*          |         |- -- -- -- -- -&gt;  EXPIRED  |          |         |  (ttl)   *- -- -- -- -- --*   - -- -- --&gt; PENDING |          |         &lt;- -- -- -- -- -- -- -- -*          |         |                |          *- -- -- -- --*            (rollback)               |                     |          (in ledger)          *- -- -- -- -- --*               |               |           |               *- -- -- -- -- -- -- --&gt; IN_LEDGER |                               |           |                               *- -- -- -- -- --*   &#x60;&#x60;&#x60;  (required).</param>
        /// <param name="metadata">**⚠️ WARNING ⚠️**  _Please note that metadata provided in a transaction will be stored on the blockchain forever. Make sure not to include any sensitive data, in particular personally identifiable information (PII)._  Extra application data attached to the transaction.  Cardano allows users and developers to embed their own authenticated metadata when submitting transactions. Metadata can be expressed as a JSON object with some restrictions:  1. All top-level keys must be integers between &#x60;0&#x60; and &#x60;2^64 - 1&#x60;.  2. Each metadata value is tagged with its type.  3. Strings must be at most 64 bytes when UTF-8 encoded.  4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.  Metadata aren&#x27;t stored as JSON on the Cardano blockchain but are instead stored using a compact binary encoding (CBOR).  The binary encoding of metadata values supports three simple types:  * Integers in the range &#x60;-(2^64 - 1)&#x60; to &#x60;2^64 - 1&#x60; * Strings (UTF-8 encoded) * Bytestrings  And two compound types:  * Lists of metadata values * Mappings from metadata values to metadata values  It is possible to transform any JSON object into this schema.  However, if your application uses floating point values, they will need to be converted somehow, according to your requirements. Likewise for &#x60;null&#x60; or &#x60;bool&#x60; values. When reading metadata from chain, be aware that integers may exceed the javascript numeric range, and may need special \&quot;bigint\&quot; parsing. .</param>
        public ApiTransaction(string id = default(string), WalletswalletIdtransactionsAmount amount = default(WalletswalletIdtransactionsAmount), WalletswalletIdpaymentfeesAmount fee = default(WalletswalletIdpaymentfeesAmount), WalletswalletIdpaymentfeesAmount deposit = default(WalletswalletIdpaymentfeesAmount), WalletswalletIdtransactionsInsertedAt insertedAt = default(WalletswalletIdtransactionsInsertedAt), WalletswalletIdtransactionsExpiresAt expiresAt = default(WalletswalletIdtransactionsExpiresAt), WalletswalletIdtransactionsPendingSince pendingSince = default(WalletswalletIdtransactionsPendingSince), WalletswalletIdtransactionsDepth depth = default(WalletswalletIdtransactionsDepth), DirectionEnum direction = default(DirectionEnum), List<WalletswalletIdtransactionsInputs> inputs = default(List<WalletswalletIdtransactionsInputs>), List<WalletswalletIdpaymentfeesPayments> outputs = default(List<WalletswalletIdpaymentfeesPayments>), List<WalletswalletIdtransactionsWithdrawals> withdrawals = default(List<WalletswalletIdtransactionsWithdrawals>), List<WalletswalletIdtransactionsMint> mint = default(List<WalletswalletIdtransactionsMint>), StatusEnum status = default(StatusEnum), Dictionary<string, TransactionMetadataValue> metadata = default(Dictionary<string, TransactionMetadataValue>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ApiTransaction and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for ApiTransaction and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "fee" is required (not null)
            if (fee == null)
            {
                throw new InvalidDataException("fee is a required property for ApiTransaction and cannot be null");
            }
            else
            {
                this.Fee = fee;
            }
            // to ensure "deposit" is required (not null)
            if (deposit == null)
            {
                throw new InvalidDataException("deposit is a required property for ApiTransaction and cannot be null");
            }
            else
            {
                this.Deposit = deposit;
            }
            // to ensure "direction" is required (not null)
            if (direction == null)
            {
                throw new InvalidDataException("direction is a required property for ApiTransaction and cannot be null");
            }
            else
            {
                this.Direction = direction;
            }
            // to ensure "inputs" is required (not null)
            if (inputs == null)
            {
                throw new InvalidDataException("inputs is a required property for ApiTransaction and cannot be null");
            }
            else
            {
                this.Inputs = inputs;
            }
            // to ensure "outputs" is required (not null)
            if (outputs == null)
            {
                throw new InvalidDataException("outputs is a required property for ApiTransaction and cannot be null");
            }
            else
            {
                this.Outputs = outputs;
            }
            // to ensure "withdrawals" is required (not null)
            if (withdrawals == null)
            {
                throw new InvalidDataException("withdrawals is a required property for ApiTransaction and cannot be null");
            }
            else
            {
                this.Withdrawals = withdrawals;
            }
            // to ensure "mint" is required (not null)
            if (mint == null)
            {
                throw new InvalidDataException("mint is a required property for ApiTransaction and cannot be null");
            }
            else
            {
                this.Mint = mint;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for ApiTransaction and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.InsertedAt = insertedAt;
            this.ExpiresAt = expiresAt;
            this.PendingSince = pendingSince;
            this.Depth = depth;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// A unique identifier for this transaction
        /// </summary>
        /// <value>A unique identifier for this transaction</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public WalletswalletIdtransactionsAmount Amount { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public WalletswalletIdpaymentfeesAmount Fee { get; set; }

        /// <summary>
        /// Gets or Sets Deposit
        /// </summary>
        [DataMember(Name="deposit", EmitDefaultValue=false)]
        public WalletswalletIdpaymentfeesAmount Deposit { get; set; }

        /// <summary>
        /// Gets or Sets InsertedAt
        /// </summary>
        [DataMember(Name="inserted_at", EmitDefaultValue=false)]
        public WalletswalletIdtransactionsInsertedAt InsertedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name="expires_at", EmitDefaultValue=false)]
        public WalletswalletIdtransactionsExpiresAt ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets PendingSince
        /// </summary>
        [DataMember(Name="pending_since", EmitDefaultValue=false)]
        public WalletswalletIdtransactionsPendingSince PendingSince { get; set; }

        /// <summary>
        /// Gets or Sets Depth
        /// </summary>
        [DataMember(Name="depth", EmitDefaultValue=false)]
        public WalletswalletIdtransactionsDepth Depth { get; set; }


        /// <summary>
        /// A list of transaction inputs.  &#x60;assets&#x60; and &#x60;address&#x60; are always present for &#x60;outgoing&#x60; transactions but generally absent for &#x60;incoming&#x60; transactions. This information is present on the Cardano explorer, but is not tracked by the wallet. 
        /// </summary>
        /// <value>A list of transaction inputs.  &#x60;assets&#x60; and &#x60;address&#x60; are always present for &#x60;outgoing&#x60; transactions but generally absent for &#x60;incoming&#x60; transactions. This information is present on the Cardano explorer, but is not tracked by the wallet. </value>
        [DataMember(Name="inputs", EmitDefaultValue=false)]
        public List<WalletswalletIdtransactionsInputs> Inputs { get; set; }

        /// <summary>
        /// A list of target outputs
        /// </summary>
        /// <value>A list of target outputs</value>
        [DataMember(Name="outputs", EmitDefaultValue=false)]
        public List<WalletswalletIdpaymentfeesPayments> Outputs { get; set; }

        /// <summary>
        /// A list of withdrawals from stake addresses.
        /// </summary>
        /// <value>A list of withdrawals from stake addresses.</value>
        [DataMember(Name="withdrawals", EmitDefaultValue=false)]
        public List<WalletswalletIdtransactionsWithdrawals> Withdrawals { get; set; }

        /// <summary>
        /// &lt;p&gt;status: &lt;strong&gt;⚠ under development&lt;/strong&gt;&lt;/p&gt;  _This field is not implemented yet, and will always be empty._  Assets minted (created) or unminted (destroyed)  This amount contributes to the total transaction value.  Positive values denote creation of assets and negative values denote the reverse. 
        /// </summary>
        /// <value>&lt;p&gt;status: &lt;strong&gt;⚠ under development&lt;/strong&gt;&lt;/p&gt;  _This field is not implemented yet, and will always be empty._  Assets minted (created) or unminted (destroyed)  This amount contributes to the total transaction value.  Positive values denote creation of assets and negative values denote the reverse. </value>
        [DataMember(Name="mint", EmitDefaultValue=false)]
        public List<WalletswalletIdtransactionsMint> Mint { get; set; }


        /// <summary>
        /// **⚠️ WARNING ⚠️**  _Please note that metadata provided in a transaction will be stored on the blockchain forever. Make sure not to include any sensitive data, in particular personally identifiable information (PII)._  Extra application data attached to the transaction.  Cardano allows users and developers to embed their own authenticated metadata when submitting transactions. Metadata can be expressed as a JSON object with some restrictions:  1. All top-level keys must be integers between &#x60;0&#x60; and &#x60;2^64 - 1&#x60;.  2. Each metadata value is tagged with its type.  3. Strings must be at most 64 bytes when UTF-8 encoded.  4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.  Metadata aren&#x27;t stored as JSON on the Cardano blockchain but are instead stored using a compact binary encoding (CBOR).  The binary encoding of metadata values supports three simple types:  * Integers in the range &#x60;-(2^64 - 1)&#x60; to &#x60;2^64 - 1&#x60; * Strings (UTF-8 encoded) * Bytestrings  And two compound types:  * Lists of metadata values * Mappings from metadata values to metadata values  It is possible to transform any JSON object into this schema.  However, if your application uses floating point values, they will need to be converted somehow, according to your requirements. Likewise for &#x60;null&#x60; or &#x60;bool&#x60; values. When reading metadata from chain, be aware that integers may exceed the javascript numeric range, and may need special \&quot;bigint\&quot; parsing. 
        /// </summary>
        /// <value>**⚠️ WARNING ⚠️**  _Please note that metadata provided in a transaction will be stored on the blockchain forever. Make sure not to include any sensitive data, in particular personally identifiable information (PII)._  Extra application data attached to the transaction.  Cardano allows users and developers to embed their own authenticated metadata when submitting transactions. Metadata can be expressed as a JSON object with some restrictions:  1. All top-level keys must be integers between &#x60;0&#x60; and &#x60;2^64 - 1&#x60;.  2. Each metadata value is tagged with its type.  3. Strings must be at most 64 bytes when UTF-8 encoded.  4. Bytestrings are hex-encoded, with a maximum length of 64 bytes.  Metadata aren&#x27;t stored as JSON on the Cardano blockchain but are instead stored using a compact binary encoding (CBOR).  The binary encoding of metadata values supports three simple types:  * Integers in the range &#x60;-(2^64 - 1)&#x60; to &#x60;2^64 - 1&#x60; * Strings (UTF-8 encoded) * Bytestrings  And two compound types:  * Lists of metadata values * Mappings from metadata values to metadata values  It is possible to transform any JSON object into this schema.  However, if your application uses floating point values, they will need to be converted somehow, according to your requirements. Likewise for &#x60;null&#x60; or &#x60;bool&#x60; values. When reading metadata from chain, be aware that integers may exceed the javascript numeric range, and may need special \&quot;bigint\&quot; parsing. </value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, TransactionMetadataValue> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiTransaction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Deposit: ").Append(Deposit).Append("\n");
            sb.Append("  InsertedAt: ").Append(InsertedAt).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  PendingSince: ").Append(PendingSince).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  Withdrawals: ").Append(Withdrawals).Append("\n");
            sb.Append("  Mint: ").Append(Mint).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiTransaction);
        }

        /// <summary>
        /// Returns true if ApiTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.Deposit == input.Deposit ||
                    (this.Deposit != null &&
                    this.Deposit.Equals(input.Deposit))
                ) && 
                (
                    this.InsertedAt == input.InsertedAt ||
                    (this.InsertedAt != null &&
                    this.InsertedAt.Equals(input.InsertedAt))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.PendingSince == input.PendingSince ||
                    (this.PendingSince != null &&
                    this.PendingSince.Equals(input.PendingSince))
                ) && 
                (
                    this.Depth == input.Depth ||
                    (this.Depth != null &&
                    this.Depth.Equals(input.Depth))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.Outputs == input.Outputs ||
                    this.Outputs != null &&
                    input.Outputs != null &&
                    this.Outputs.SequenceEqual(input.Outputs)
                ) && 
                (
                    this.Withdrawals == input.Withdrawals ||
                    this.Withdrawals != null &&
                    input.Withdrawals != null &&
                    this.Withdrawals.SequenceEqual(input.Withdrawals)
                ) && 
                (
                    this.Mint == input.Mint ||
                    this.Mint != null &&
                    input.Mint != null &&
                    this.Mint.SequenceEqual(input.Mint)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.Deposit != null)
                    hashCode = hashCode * 59 + this.Deposit.GetHashCode();
                if (this.InsertedAt != null)
                    hashCode = hashCode * 59 + this.InsertedAt.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                if (this.PendingSince != null)
                    hashCode = hashCode * 59 + this.PendingSince.GetHashCode();
                if (this.Depth != null)
                    hashCode = hashCode * 59 + this.Depth.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.Outputs != null)
                    hashCode = hashCode * 59 + this.Outputs.GetHashCode();
                if (this.Withdrawals != null)
                    hashCode = hashCode * 59 + this.Withdrawals.GetHashCode();
                if (this.Mint != null)
                    hashCode = hashCode * 59 + this.Mint.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

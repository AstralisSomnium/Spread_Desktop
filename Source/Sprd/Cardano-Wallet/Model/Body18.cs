/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Body18
    /// </summary>
    [DataContract]
        public partial class Body18 :  IEquatable<Body18>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body18" /> class.
        /// </summary>
        /// <param name="payments">A list of target outputs (required).</param>
        /// <param name="passphrase">The wallet&#x27;s master passphrase. (required).</param>
        public Body18(List<WalletswalletIdpaymentfeesPayments> payments = default(List<WalletswalletIdpaymentfeesPayments>), string passphrase = default(string))
        {
            // to ensure "payments" is required (not null)
            if (payments == null)
            {
                throw new InvalidDataException("payments is a required property for Body18 and cannot be null");
            }
            else
            {
                this.Payments = payments;
            }
            // to ensure "passphrase" is required (not null)
            if (passphrase == null)
            {
                throw new InvalidDataException("passphrase is a required property for Body18 and cannot be null");
            }
            else
            {
                this.Passphrase = passphrase;
            }
        }
        
        /// <summary>
        /// A list of target outputs
        /// </summary>
        /// <value>A list of target outputs</value>
        [DataMember(Name="payments", EmitDefaultValue=false)]
        public List<WalletswalletIdpaymentfeesPayments> Payments { get; set; }

        /// <summary>
        /// The wallet&#x27;s master passphrase.
        /// </summary>
        /// <value>The wallet&#x27;s master passphrase.</value>
        [DataMember(Name="passphrase", EmitDefaultValue=false)]
        public string Passphrase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body18 {\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  Passphrase: ").Append(Passphrase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body18);
        }

        /// <summary>
        /// Returns true if Body18 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body18 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body18 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Payments == input.Payments ||
                    this.Payments != null &&
                    input.Payments != null &&
                    this.Payments.SequenceEqual(input.Payments)
                ) && 
                (
                    this.Passphrase == input.Passphrase ||
                    (this.Passphrase != null &&
                    this.Passphrase.Equals(input.Passphrase))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Payments != null)
                    hashCode = hashCode * 59 + this.Payments.GetHashCode();
                if (this.Passphrase != null)
                    hashCode = hashCode * 59 + this.Passphrase.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

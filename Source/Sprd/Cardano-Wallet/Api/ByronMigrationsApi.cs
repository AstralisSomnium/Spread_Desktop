/* 
 * Cardano Wallet Backend API
 *
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: 2021.2.15
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IByronMigrationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Calculate Cost
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Calculate the exact cost of sending all funds from particular Byron wallet to a set of addresses. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 GetByronWalletMigrationInfo (string walletId);

        /// <summary>
        /// Calculate Cost
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Calculate the exact cost of sending all funds from particular Byron wallet to a set of addresses. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> GetByronWalletMigrationInfoWithHttpInfo (string walletId);
        /// <summary>
        /// Migrate
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Submit one or more transactions which transfers all funds from a Byron wallet to a set of addresses.  This operation attempts to preserve the UTxO \&quot;shape\&quot; of a wallet as far as possible. That is, coins will not be agglomerated. Therefore, if the wallet has a large UTxO set, several transactions may be needed.  A typical usage would be when one wants to move all funds from an old wallet to another (Shelley or Byron) by providing addresses coming from the new wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>List&lt;InlineResponse2004&gt;</returns>
        List<InlineResponse2004> MigrateByronWallet (Body20 body, string walletId);

        /// <summary>
        /// Migrate
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Submit one or more transactions which transfers all funds from a Byron wallet to a set of addresses.  This operation attempts to preserve the UTxO \&quot;shape\&quot; of a wallet as far as possible. That is, coins will not be agglomerated. Therefore, if the wallet has a large UTxO set, several transactions may be needed.  A typical usage would be when one wants to move all funds from an old wallet to another (Shelley or Byron) by providing addresses coming from the new wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>ApiResponse of List&lt;InlineResponse2004&gt;</returns>
        ApiResponse<List<InlineResponse2004>> MigrateByronWalletWithHttpInfo (Body20 body, string walletId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Calculate Cost
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Calculate the exact cost of sending all funds from particular Byron wallet to a set of addresses. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> GetByronWalletMigrationInfoAsync (string walletId);

        /// <summary>
        /// Calculate Cost
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Calculate the exact cost of sending all funds from particular Byron wallet to a set of addresses. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetByronWalletMigrationInfoAsyncWithHttpInfo (string walletId);
        /// <summary>
        /// Migrate
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Submit one or more transactions which transfers all funds from a Byron wallet to a set of addresses.  This operation attempts to preserve the UTxO \&quot;shape\&quot; of a wallet as far as possible. That is, coins will not be agglomerated. Therefore, if the wallet has a large UTxO set, several transactions may be needed.  A typical usage would be when one wants to move all funds from an old wallet to another (Shelley or Byron) by providing addresses coming from the new wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of List&lt;InlineResponse2004&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2004>> MigrateByronWalletAsync (Body20 body, string walletId);

        /// <summary>
        /// Migrate
        /// </summary>
        /// <remarks>
        /// &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Submit one or more transactions which transfers all funds from a Byron wallet to a set of addresses.  This operation attempts to preserve the UTxO \&quot;shape\&quot; of a wallet as far as possible. That is, coins will not be agglomerated. Therefore, if the wallet has a large UTxO set, several transactions may be needed.  A typical usage would be when one wants to move all funds from an old wallet to another (Shelley or Byron) by providing addresses coming from the new wallet. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2004&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2004>>> MigrateByronWalletAsyncWithHttpInfo (Body20 body, string walletId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ByronMigrationsApi : IByronMigrationsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ByronMigrationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ByronMigrationsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ByronMigrationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ByronMigrationsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ByronMigrationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ByronMigrationsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Calculate Cost &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Calculate the exact cost of sending all funds from particular Byron wallet to a set of addresses. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 GetByronWalletMigrationInfo (string walletId)
        {
             ApiResponse<InlineResponse2009> localVarResponse = GetByronWalletMigrationInfoWithHttpInfo(walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate Cost &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Calculate the exact cost of sending all funds from particular Byron wallet to a set of addresses. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse< InlineResponse2009 > GetByronWalletMigrationInfoWithHttpInfo (string walletId)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling ByronMigrationsApi->GetByronWalletMigrationInfo");

            var localVarPath = "/byron-wallets/{walletId}/migrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByronWalletMigrationInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// Calculate Cost &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Calculate the exact cost of sending all funds from particular Byron wallet to a set of addresses. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> GetByronWalletMigrationInfoAsync (string walletId)
        {
             ApiResponse<InlineResponse2009> localVarResponse = await GetByronWalletMigrationInfoAsyncWithHttpInfo(walletId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate Cost &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Calculate the exact cost of sending all funds from particular Byron wallet to a set of addresses. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletId"></param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetByronWalletMigrationInfoAsyncWithHttpInfo (string walletId)
        {
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling ByronMigrationsApi->GetByronWalletMigrationInfo");

            var localVarPath = "/byron-wallets/{walletId}/migrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByronWalletMigrationInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// Migrate &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Submit one or more transactions which transfers all funds from a Byron wallet to a set of addresses.  This operation attempts to preserve the UTxO \&quot;shape\&quot; of a wallet as far as possible. That is, coins will not be agglomerated. Therefore, if the wallet has a large UTxO set, several transactions may be needed.  A typical usage would be when one wants to move all funds from an old wallet to another (Shelley or Byron) by providing addresses coming from the new wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>List&lt;InlineResponse2004&gt;</returns>
        public List<InlineResponse2004> MigrateByronWallet (Body20 body, string walletId)
        {
             ApiResponse<List<InlineResponse2004>> localVarResponse = MigrateByronWalletWithHttpInfo(body, walletId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Migrate &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Submit one or more transactions which transfers all funds from a Byron wallet to a set of addresses.  This operation attempts to preserve the UTxO \&quot;shape\&quot; of a wallet as far as possible. That is, coins will not be agglomerated. Therefore, if the wallet has a large UTxO set, several transactions may be needed.  A typical usage would be when one wants to move all funds from an old wallet to another (Shelley or Byron) by providing addresses coming from the new wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>ApiResponse of List&lt;InlineResponse2004&gt;</returns>
        public ApiResponse< List<InlineResponse2004> > MigrateByronWalletWithHttpInfo (Body20 body, string walletId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ByronMigrationsApi->MigrateByronWallet");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling ByronMigrationsApi->MigrateByronWallet");

            var localVarPath = "/byron-wallets/{walletId}/migrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MigrateByronWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2004>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2004>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2004>)));
        }

        /// <summary>
        /// Migrate &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Submit one or more transactions which transfers all funds from a Byron wallet to a set of addresses.  This operation attempts to preserve the UTxO \&quot;shape\&quot; of a wallet as far as possible. That is, coins will not be agglomerated. Therefore, if the wallet has a large UTxO set, several transactions may be needed.  A typical usage would be when one wants to move all funds from an old wallet to another (Shelley or Byron) by providing addresses coming from the new wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of List&lt;InlineResponse2004&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2004>> MigrateByronWalletAsync (Body20 body, string walletId)
        {
             ApiResponse<List<InlineResponse2004>> localVarResponse = await MigrateByronWalletAsyncWithHttpInfo(body, walletId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Migrate &lt;p align&#x3D;\&quot;right\&quot;&gt;status: &lt;strong&gt;disabled&lt;/strong&gt;&lt;/p&gt; &lt;strong&gt;⚠️IMPORTANT⚠️&lt;/strong&gt; This endpoint has been temporarily disabled with the introduction of multi-assets UTxO. It will be enabled again soon.  &lt;hr/&gt;  Submit one or more transactions which transfers all funds from a Byron wallet to a set of addresses.  This operation attempts to preserve the UTxO \&quot;shape\&quot; of a wallet as far as possible. That is, coins will not be agglomerated. Therefore, if the wallet has a large UTxO set, several transactions may be needed.  A typical usage would be when one wants to move all funds from an old wallet to another (Shelley or Byron) by providing addresses coming from the new wallet. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="walletId"></param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2004&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2004>>> MigrateByronWalletAsyncWithHttpInfo (Body20 body, string walletId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ByronMigrationsApi->MigrateByronWallet");
            // verify the required parameter 'walletId' is set
            if (walletId == null)
                throw new ApiException(400, "Missing required parameter 'walletId' when calling ByronMigrationsApi->MigrateByronWallet");

            var localVarPath = "/byron-wallets/{walletId}/migrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletId != null) localVarPathParams.Add("walletId", this.Configuration.ApiClient.ParameterToString(walletId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MigrateByronWallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2004>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2004>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2004>)));
        }

    }
}
